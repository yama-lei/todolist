{"version":3,"file":"js/851.af1a2bb3.js","mappings":"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","sources":["webpack://zhiyuxinsheng/./src/stores/currency.js","webpack://zhiyuxinsheng/./src/views/Garden.vue","webpack://zhiyuxinsheng/./src/views/Garden.vue?1cc9"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport api from '../services/api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport const useCurrencyStore = defineStore('currency', {\r\n  state: () => ({\r\n    coins: parseInt(localStorage.getItem('coins') || '100'),\r\n    loading: false\r\n  }),\r\n  \r\n  actions: {\r\n    // 增加金币\r\n    addCoins(amount) {\r\n      this.coins += amount\r\n      this.saveCoins()\r\n    },\r\n    \r\n    // 减少金币\r\n    deductCoins(amount) {\r\n      if (this.coins >= amount) {\r\n        this.coins -= amount\r\n        this.saveCoins()\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n    \r\n    // 保存金币到本地存储\r\n    saveCoins() {\r\n      localStorage.setItem('coins', this.coins.toString())\r\n    },\r\n    \r\n    // 重置金币\r\n    resetCoins() {\r\n      this.coins = 100\r\n      this.saveCoins()\r\n    }\r\n  }\r\n}) ","<template>\r\n  <div class=\"garden-page\">\r\n    <div class=\"garden-background\"></div>\r\n    \r\n    <div class=\"container\">\r\n      <div class=\"garden-header card\">\r\n        <h2 class=\"card-title\">花语坊</h2>\r\n        <p class=\"garden-description\">\r\n          在这里，你可以查看和管理你的植物，打造属于自己的花园。\r\n        </p>\r\n        <div class=\"garden-stats\">\r\n          <div class=\"stats-item plants\">\r\n            <span class=\"stats-icon\">🌱</span>\r\n            <span class=\"stats-value\">{{ myPlants.length }}</span>\r\n            <span class=\"stats-label\">植物</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"garden-content\">\r\n        <div class=\"my-garden-section card\">\r\n          <div class=\"section-header\">\r\n            <h3 class=\"section-title\">未完成的春天</h3>\r\n          </div>\r\n          \r\n          <div class=\"empty-garden\" v-if=\"myPlants.length === 0\">\r\n            <el-empty description=\"你的花园还空空如也~\">\r\n              <template #image>\r\n                <div class=\"empty-image\">🏡</div>\r\n              </template>\r\n            </el-empty>\r\n          </div>\r\n          \r\n          <div v-else class=\"garden-plants-row\">\r\n            <div \r\n              v-for=\"plant in filteredPlants\" \r\n              :key=\"plant.id\" \r\n              class=\"garden-plant-item\"\r\n              :class=\"{ 'is-main-plant': plant.isMainPlant }\"\r\n            >\r\n              <div class=\"plant-avatar\">\r\n                <WeatherCanvas :weather=\"plant.weather || 'sunny'\" :width=\"200\" :height=\"200\" />\r\n                <!-- 使用图片替代emoji -->\r\n                <img :src=\"getPlantImage(plant)\" class=\"plant-image\" alt=\"植物图片\" />\r\n              </div>\r\n              \r\n              <div class=\"plant-details\">\r\n                <div class=\"plant-header\">\r\n                  <div class=\"plant-name\">{{ plant.name }}</div>\r\n                  <div v-if=\"plant.isMainPlant\" class=\"main-plant-badge\">\r\n                    <el-tag size=\"small\" type=\"success\" effect=\"dark\">主要植物</el-tag>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"plant-level-container\">\r\n                  <div class=\"plant-level\">等级: <span class=\"level-value\">{{ plant.level }}</span></div>\r\n                  <el-progress \r\n                    :percentage=\"calculatePlantExp(plant)\" \r\n                    :format=\"expFormat\" \r\n                    :stroke-width=\"10\"\r\n                    class=\"plant-exp-progress\"\r\n                  />\r\n                </div>\r\n                \r\n                <!-- 添加天气选择器 -->\r\n                <div class=\"plant-weather-selector\">\r\n                  <span class=\"weather-label\">环境:</span>\r\n                  <div class=\"weather-options\">\r\n                    <span \r\n                      class=\"weather-option\" \r\n                      :class=\"{ active: plant.weather === 'sunny' || !plant.weather }\"\r\n                      title=\"晴天\"\r\n                      @click=\"updatePlantWeather(plant, 'sunny')\"\r\n                    >☀️</span>\r\n                    <span \r\n                      class=\"weather-option\" \r\n                      :class=\"{ active: plant.weather === 'rainy' }\"\r\n                      title=\"下雨\"\r\n                      @click=\"updatePlantWeather(plant, 'rainy')\"\r\n                    >🌧️</span>\r\n                    <span \r\n                      class=\"weather-option\" \r\n                      :class=\"{ active: plant.weather === 'cloudy' }\"\r\n                      title=\"多云\"\r\n                      @click=\"updatePlantWeather(plant, 'cloudy')\"\r\n                    >☁️</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"plant-actions\">\r\n                <el-button size=\"small\" type=\"primary\" @click=\"showDialog(plant)\">\r\n                  <span class=\"button-icon\">💬</span>聆听心声\r\n                </el-button>\r\n                <el-button \r\n                  size=\"small\" \r\n                  type=\"success\" \r\n                  plain\r\n                  @click=\"setAsMainPlant(plant)\"\r\n                  :disabled=\"plant.isMainPlant\"\r\n                >\r\n                  <span class=\"button-icon\">⭐</span>设为主植物\r\n                </el-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"plant-companionship\" v-if=\"myPlants.length > 0\">\r\n            不知不觉中，植物已经陪伴你{{ plantDays }}天了,陪你完成了{{ completedTasksCount }}个任务\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <PlantDialog \r\n      :messages=\"plantStore.thoughts\"\r\n      :is-visible=\"showPlantThoughtDialog\"\r\n      :show-buttons=\"false\"\r\n      @primary-action=\"showPlantThoughtDialog = false\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, computed, watch } from 'vue'\r\nimport { useCurrencyStore } from '../stores/currency'\r\nimport { usePlantStore } from '../stores/plant'\r\nimport { useTaskStore } from '../stores/task'\r\nimport { ElMessage } from 'element-plus'\r\nimport WeatherCanvas from '@/components/WeatherCanvas.vue'\r\nimport PlantDialog from '@/components/PlantDialog.vue'\r\n\r\n// 导入植物图片\r\nimport plant1Level1 from '@/assets/images/plant/1-1.png'\r\nimport plant1Level2 from '@/assets/images/plant/1-2.png'\r\nimport plant1Level3 from '@/assets/images/plant/1-3.png'\r\nimport plant2Level1 from '@/assets/images/plant/2-1.png'\r\nimport plant2Level2 from '@/assets/images/plant/2-2.png'\r\nimport plant2Level3 from '@/assets/images/plant/2-3.png'\r\nimport plant3Level1 from '@/assets/images/plant/3-1.png'\r\nimport plant3Level2 from '@/assets/images/plant/3-2.png'\r\nimport plant3Level3 from '@/assets/images/plant/3-3.png'\r\nimport plant4Level1 from '@/assets/images/plant/4-1.png'\r\nimport plant4Level2 from '@/assets/images/plant/4-2.png'\r\nimport plant4Level3 from '@/assets/images/plant/4-3.png'\r\nimport plant5Level1 from '@/assets/images/plant/5-1.png'\r\nimport plant5Level2 from '@/assets/images/plant/5-2.png'\r\nimport plant5Level3 from '@/assets/images/plant/5-3.png'\r\n\r\nexport default {\r\n  name: 'GardenPage',\r\n  components: {\r\n    WeatherCanvas,\r\n    PlantDialog\r\n  },\r\n  setup() {\r\n    const currencyStore = useCurrencyStore()\r\n    const plantStore = usePlantStore()\r\n    const taskStore = useTaskStore()\r\n    \r\n    const selectedPlantForDialog = ref(null)\r\n    const showPlantThoughtDialog = ref(false)\r\n    const searchPlant = ref('')\r\n    \r\n    // 植物图片映射\r\n    const plantImages = {\r\n      '玫瑰': {\r\n        1: plant1Level1,\r\n        2: plant1Level2,\r\n        3: plant1Level3\r\n      },\r\n      '仙人掌': {\r\n        1: plant2Level1,\r\n        2: plant2Level2,\r\n        3: plant2Level3\r\n      },\r\n      '郁金香': {\r\n        1: plant3Level1,\r\n        2: plant3Level2,\r\n        3: plant3Level3\r\n      },\r\n      '白百合': {\r\n        1: plant4Level1,\r\n        2: plant4Level2,\r\n        3: plant4Level3\r\n      },\r\n      '向日葵': {\r\n        1: plant5Level1,\r\n        2: plant5Level2,\r\n        3: plant5Level3\r\n      }\r\n    }\r\n    \r\n    // 获取植物图片\r\n    const getPlantImage = (plant) => {\r\n      if (!plant || !plant.type) {\r\n        return plant1Level1 // 返回默认图片\r\n      }\r\n\r\n      const type = plant.type.trim() // 移除可能存在的前后空格\r\n      const level = plant.level || 1\r\n      \r\n      // 检查植物类型和等级限制\r\n      const clampLevel = Math.min(Math.max(level, 1), 3) // 限制等级在1-3之间\r\n      \r\n      // 根据植物类型返回对应图片\r\n      const plantTypeImages = plantImages[type]\r\n      if (!plantTypeImages) {\r\n        return plant1Level1 // 如果找不到对应类型的图片，返回默认图片\r\n      }\r\n\r\n      return plantTypeImages[clampLevel] || plant1Level1 // 如果找不到对应等级的图片，返回默认图片\r\n    }\r\n    \r\n    // 所有植物列表 (已解锁)\r\n    const allPlants = reactive([\r\n      { id: 'plant1', name: '绯色絮语', type: '玫瑰', emoji: '🌹', level: 1, experience: 0, weather: 'sunny', isMainPlant: false },\r\n      { id: 'plant2', name: '沙屿星芒', type: '仙人掌', emoji: '🌵', level: 1, experience: 0, weather: 'sunny', isMainPlant: false },\r\n      { id: 'plant3', name: '冰爵士', type: '郁金香', emoji: '🌸', level: 1, experience: 0, weather: 'sunny', isMainPlant: false },\r\n      { id: 'plant4', name: '云归处', type: '白百何', emoji: '🌲', level: 1, experience: 0, weather: 'sunny', isMainPlant: false },\r\n      { id: 'plant5', name: '日轮礼赞', type: '向日葵', emoji: '🌻', level: 1, experience: 0, weather: 'sunny', isMainPlant: false }\r\n    ])\r\n    \r\n    // 加载植物列表\r\n    onMounted(async () => {\r\n      await plantStore.fetchPlants()\r\n      \r\n      // 初始化植物数据\r\n      for (const plant of allPlants) {\r\n        // 检查是否已存在该类型的植物\r\n        const existingPlant = plantStore.plants.find(p => p.type === plant.type)\r\n        if (!existingPlant) {\r\n          try {\r\n            const newPlant = await plantStore.createPlant({\r\n              name: plant.name,\r\n              type: plant.type,\r\n              emoji: plant.emoji,\r\n              isMainPlant: plant.isMainPlant\r\n            })\r\n            console.log('创建新植物成功:', newPlant)\r\n          } catch (error) {\r\n            console.error('创建植物失败:', error)\r\n            ElMessage.error('创建植物失败')\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 如果没有主植物，将第一个设为主植物\r\n      const mainPlant = plantStore.plants.find(p => p.isMainPlant)\r\n      if (!mainPlant && plantStore.plants.length > 0) {\r\n        const firstPlant = plantStore.plants[0]\r\n        const plantId = firstPlant._id || firstPlant.id\r\n        if (plantId) {\r\n          try {\r\n            await plantStore.updatePlant(plantId, { isMainPlant: true })\r\n            console.log('设置主植物成功:', firstPlant.name)\r\n          } catch (error) {\r\n            console.error('设置主植物失败:', error)\r\n            ElMessage.error('设置主植物失败')\r\n          }\r\n        }\r\n      }\r\n      \r\n      await taskStore.fetchTasks()\r\n    })\r\n    \r\n    // 计算植物经验百分比\r\n    const calculatePlantExp = (plant) => {\r\n      const currentExp = plant.experience || 0\r\n      const level = plant.level || 1\r\n      return Math.min(100, (currentExp / (level * 100)) * 100)\r\n    }\r\n    \r\n    // 经验格式化\r\n    const expFormat = (percentage) => {\r\n      // 修复：通过percentage可以找到对应的植物，不需要依赖selectedPlantForDialog\r\n      // 在进度条中显示时，会传入当前实际的percentage\r\n      const plant = plantStore.plants.find(p => \r\n        calculatePlantExp(p) === percentage\r\n      )\r\n      \r\n      // 如果找不到匹配的植物，返回百分比\r\n      if (!plant) {\r\n        // 回退到通过selectedPlantForDialog查找植物\r\n        if (selectedPlantForDialog.value) {\r\n          const fallbackPlant = plantStore.plants.find(p => \r\n            (p._id === selectedPlantForDialog.value._id) || \r\n            (p.id === selectedPlantForDialog.value.id)\r\n          )\r\n          if (fallbackPlant) {\r\n            const currentExp = fallbackPlant.experience || 0\r\n            const level = fallbackPlant.level || 1\r\n            const nextLevelExp = level * 100\r\n            return `${currentExp}/${nextLevelExp}`\r\n          }\r\n        }\r\n        return `${Math.round(percentage)}%`\r\n      }\r\n      \r\n      const currentExp = plant.experience || 0\r\n      const level = plant.level || 1\r\n      const nextLevelExp = level * 100\r\n      return `${currentExp}/${nextLevelExp}`\r\n    }\r\n    \r\n    // 更新植物天气\r\n    const updatePlantWeather = async (plant, weather) => {\r\n      if (plant.weather === weather) return\r\n      \r\n      // 获取正确的植物ID\r\n      const plantId = plant._id || plant.id\r\n      if (!plantId) {\r\n        console.error('无法更新植物天气: 植物ID无效', plant)\r\n        ElMessage.error('更新失败：无法获取植物ID')\r\n        return\r\n      }\r\n      \r\n      console.log('更新植物天气，植物ID:', plantId, '天气:', weather)\r\n      try {\r\n        await plantStore.updatePlant(plantId, { weather })\r\n        ElMessage.success('植物环境已更新')\r\n      } catch (error) {\r\n        console.error('更新植物天气失败:', error)\r\n        ElMessage.error(`更新失败: ${error.message || '未知错误'}`)\r\n      }\r\n    }\r\n    \r\n    // 显示植物心声对话框\r\n    const showDialog = async (plant) => {\r\n      // 获取正确的植物ID\r\n      const plantId = plant._id || plant.id\r\n      if (!plantId) {\r\n        console.error('无法显示植物心声: 植物ID无效', plant)\r\n        ElMessage.error('无法显示植物心声：植物ID无效')\r\n        return\r\n      }\r\n      \r\n      selectedPlantForDialog.value = plant\r\n      showPlantThoughtDialog.value = true\r\n      \r\n      // 获取植物心声\r\n      try {\r\n        const thoughts = await plantStore.fetchPlantThoughts(plantId)\r\n        // 将植物心声转换为消息格式\r\n        plantStore.thoughts = thoughts.map(thought => ({\r\n          type: 'plant',\r\n          content: thought.content,\r\n          timestamp: thought.timestamp\r\n        }))\r\n      } catch (error) {\r\n        console.error('获取植物心声失败:', error)\r\n        ElMessage.error('获取植物心声失败')\r\n      }\r\n    }\r\n    \r\n    // 生成植物心声\r\n    const generatePlantThought = async (plant) => {\r\n      // 获取正确的植物ID\r\n      const plantId = plant._id || plant.id\r\n      if (!plantId) {\r\n        console.error('无法生成植物心声: 植物ID无效', plant)\r\n        ElMessage.error('生成失败：植物ID无效')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const context = {\r\n          weather: plant.weather || 'sunny',\r\n          level: plant.level || 1,\r\n          experience: plant.experience || 0,\r\n          growthStage: plant.growthStage || 1\r\n        }\r\n        \r\n        const thought = await plantStore.generatePlantThought(plantId, context)\r\n        if (thought) {\r\n          // 将新生成的植物心声添加到消息列表\r\n          plantStore.thoughts.unshift({\r\n            type: 'plant',\r\n            content: thought.content,\r\n            timestamp: thought.timestamp\r\n          })\r\n        }\r\n        ElMessage.success('植物心声已生成')\r\n      } catch (error) {\r\n        console.error('生成植物心声失败:', error)\r\n        ElMessage.error(`生成失败: ${error.message || '未知错误'}`)\r\n      }\r\n    }\r\n    \r\n    // 设置主植物\r\n    const setAsMainPlant = async (plant) => {\r\n      if (plant.isMainPlant) return\r\n      \r\n      // 获取正确的植物ID\r\n      const plantId = plant._id || plant.id\r\n      if (!plantId) {\r\n        console.error('无法设置主植物: 植物ID无效', plant)\r\n        ElMessage.error('设置失败：无法获取植物ID')\r\n        return\r\n      }\r\n      \r\n      console.log('设置主植物，植物ID:', plantId)\r\n      try {\r\n        // 先将所有植物的主植物状态设置为false\r\n        for (const p of plantStore.plants) {\r\n          if (p.isMainPlant) {\r\n            const prevMainPlantId = p._id || p.id\r\n            await plantStore.updatePlant(prevMainPlantId, { isMainPlant: false })\r\n          }\r\n        }\r\n        \r\n        // 设置新的主植物\r\n        await plantStore.updatePlant(plantId, { isMainPlant: true })\r\n        \r\n        // 更新植物心声\r\n        await plantStore.fetchPlantThoughts(plantId)\r\n        \r\n        // 如果当前正在显示植物心声对话框，更新选中的植物\r\n        if (showPlantThoughtDialog.value) {\r\n          selectedPlantForDialog.value = plant\r\n        }\r\n        \r\n        ElMessage.success('已设置为主植物')\r\n      } catch (error) {\r\n        console.error('设置主植物失败:', error)\r\n        ElMessage.error(`设置失败: ${error.message || '未知错误'}`)\r\n      }\r\n    }\r\n    \r\n    // 过滤后的植物列表\r\n    const filteredPlants = computed(() => {\r\n      if (!searchPlant.value) return plantStore.plants\r\n      \r\n      const search = searchPlant.value.toLowerCase()\r\n      return plantStore.plants.filter(plant => \r\n        plant.name.toLowerCase().includes(search)\r\n      )\r\n    })\r\n    \r\n    // 计算植物陪伴的天数\r\n    const plantDays = computed(() => {\r\n      if (plantStore.plants.length === 0) return 0\r\n      \r\n      // 使用第一个植物的创建时间计算\r\n      const firstPlant = plantStore.plants[0]\r\n      if (!firstPlant || !firstPlant.createdAt) return 0\r\n      \r\n      const createdDate = new Date(firstPlant.createdAt)\r\n      const today = new Date()\r\n      const diffTime = Math.abs(today - createdDate)\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\r\n      \r\n      return diffDays\r\n    })\r\n    \r\n    // 获取完成的任务数量\r\n    const completedTasksCount = computed(() => {\r\n      return taskStore.completedTasks.length\r\n    })\r\n    \r\n    // 监听主植物的变化\r\n    watch(() => plantStore.plants.find(p => p.isMainPlant), async (newMainPlant) => {\r\n      if (newMainPlant) {\r\n        // 更新选中的植物\r\n        selectedPlantForDialog.value = newMainPlant\r\n        \r\n        // 如果对话框是打开的，更新植物心声\r\n        if (showPlantThoughtDialog.value) {\r\n          const plantId = newMainPlant._id || newMainPlant.id\r\n          if (plantId) {\r\n            try {\r\n              await plantStore.fetchPlantThoughts(plantId)\r\n            } catch (error) {\r\n              console.error('更新植物心声失败:', error)\r\n              ElMessage.error('更新植物心声失败')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }, { immediate: true })\r\n    \r\n    return {\r\n      currencyStore,\r\n      plantStore,\r\n      taskStore,\r\n      selectedPlantForDialog,\r\n      showPlantThoughtDialog,\r\n      searchPlant,\r\n      myPlants: computed(() => plantStore.plants),\r\n      filteredPlants,\r\n      plantDays,\r\n      completedTasksCount,\r\n      \r\n      // 方法\r\n      calculatePlantExp,\r\n      expFormat,\r\n      updatePlantWeather,\r\n      showDialog,\r\n      generatePlantThought,\r\n      setAsMainPlant,\r\n      getPlantImage\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.garden-page {\r\n  position: relative;\r\n  min-height: 100vh;\r\n  padding: 30px 0;\r\n}\r\n\r\n.garden-background {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e6ffed 100%);\r\n  z-index: -1;\r\n  opacity: 0.6;\r\n}\r\n\r\n.garden-header {\r\n  margin-bottom: 30px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border-radius: 16px;\r\n  background: linear-gradient(to right, #ebfaef, #e6f3ff);\r\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.07);\r\n  padding: 25px;\r\n}\r\n\r\n.garden-header::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 150px;\r\n  height: 150px;\r\n  background: radial-gradient(circle, rgba(76, 175, 80, 0.1) 0%, rgba(76, 175, 80, 0) 70%);\r\n  top: -30px;\r\n  right: -30px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.card-title {\r\n  font-size: 28px;\r\n  color: #2e7d32;\r\n  margin-bottom: 10px;\r\n  position: relative;\r\n}\r\n\r\n.garden-description {\r\n  color: #666;\r\n  margin-top: 10px;\r\n  font-size: 16px;\r\n  max-width: 80%;\r\n  line-height: 1.6;\r\n}\r\n\r\n.garden-stats {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.stats-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: rgba(255, 255, 255, 0.6);\r\n  padding: 12px 20px;\r\n  border-radius: 12px;\r\n  min-width: 80px;\r\n}\r\n\r\n.stats-icon {\r\n  font-size: 24px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stats-value {\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n}\r\n\r\n.stats-label {\r\n  font-size: 14px;\r\n  color: #7f8c8d;\r\n  margin-top: 3px;\r\n}\r\n\r\n.garden-content {\r\n  margin-top: 20px;\r\n}\r\n\r\n.section-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.section-title {\r\n  margin-bottom: 10px;\r\n  font-size: 22px;\r\n  color: #2e7d32;\r\n  position: relative;\r\n  padding-left: 15px;\r\n}\r\n\r\n.section-title::before {\r\n  content: '';\r\n  position: absolute;\r\n  left: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 5px;\r\n  height: 20px;\r\n  background-color: #4caf50;\r\n  border-radius: 3px;\r\n}\r\n\r\n.my-garden-section {\r\n  border-radius: 16px;\r\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.07);\r\n  background-color: white;\r\n  overflow: hidden;\r\n  transition: transform 0.3s;\r\n  padding: 25px;\r\n}\r\n\r\n.my-garden-section:hover {\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.search-input {\r\n  max-width: 200px;\r\n}\r\n\r\n.garden-plants-row {\r\n  display: flex;\r\n  overflow-x: auto;\r\n  padding: 15px 0;\r\n  gap: 20px;\r\n  scrollbar-width: thin;\r\n  margin-top: 20px;\r\n}\r\n\r\n.garden-plants-row::-webkit-scrollbar {\r\n  height: 8px;\r\n}\r\n\r\n.garden-plants-row::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n  border-radius: 10px;\r\n}\r\n\r\n.garden-plants-row::-webkit-scrollbar-thumb {\r\n  background: #c1e1c5;\r\n  border-radius: 10px;\r\n}\r\n\r\n.garden-plants-row::-webkit-scrollbar-thumb:hover {\r\n  background: #4caf50;\r\n}\r\n\r\n.garden-plant-item {\r\n  min-width: 220px;\r\n  background-color: white;\r\n  border-radius: 16px;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: all 0.3s;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);\r\n  border: 1px solid #eee;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.garden-plant-item:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.garden-plant-item.is-main-plant {\r\n  border: 2px solid #4caf50;\r\n  background: linear-gradient(to bottom, #f5fff7, white);\r\n}\r\n\r\n.garden-plant-item.is-main-plant::after {\r\n  content: '⭐';\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  font-size: 20px;\r\n  color: #ffc107;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.plant-avatar {\r\n  position: relative;\r\n  width: 180px;\r\n  height: 180px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 15px;\r\n}\r\n\r\n/* 植物图片样式 */\r\n.plant-image {\r\n  width: 90%;\r\n  height: 90%;\r\n  object-fit: contain;\r\n  z-index: 3;\r\n  position: relative;\r\n  animation: float 3s ease-in-out infinite;\r\n}\r\n\r\n@keyframes float {\r\n  0% { transform: translateY(0px); }\r\n  50% { transform: translateY(-10px); }\r\n  100% { transform: translateY(0px); }\r\n}\r\n\r\n.plant-details {\r\n  width: 100%;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.plant-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.plant-name {\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  color: #333;\r\n}\r\n\r\n.main-plant-badge {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.plant-level-container {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.plant-level {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.level-value {\r\n  font-weight: bold;\r\n  color: #4caf50;\r\n}\r\n\r\n.plant-exp-progress :deep(.el-progress-bar__outer) {\r\n  border-radius: 10px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.plant-exp-progress :deep(.el-progress-bar__inner) {\r\n  border-radius: 10px;\r\n  background: linear-gradient(90deg, #81c784, #4caf50);\r\n}\r\n\r\n.plant-weather-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 15px;\r\n  justify-content: center;\r\n  background-color: #f5f5f5;\r\n  padding: 8px 12px;\r\n  border-radius: 12px;\r\n}\r\n\r\n.weather-label {\r\n  margin-right: 10px;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.weather-options {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.weather-option {\r\n  font-size: 22px;\r\n  cursor: pointer;\r\n  opacity: 0.5;\r\n  transition: all 0.3s;\r\n  filter: grayscale(0.6);\r\n}\r\n\r\n.weather-option:hover {\r\n  transform: scale(1.2);\r\n  opacity: 0.8;\r\n  filter: grayscale(0);\r\n}\r\n\r\n.weather-option.active {\r\n  opacity: 1;\r\n  transform: scale(1.2);\r\n  filter: grayscale(0);\r\n}\r\n\r\n.plant-actions {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 15px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.button-icon {\r\n  margin-right: 5px;\r\n}\r\n\r\n.empty-garden {\r\n  padding: 40px 0;\r\n  text-align: center;\r\n}\r\n\r\n.empty-image {\r\n  font-size: 60px;\r\n  margin-bottom: 20px;\r\n  animation: float 3s ease-in-out infinite;\r\n}\r\n\r\n.plant-companionship {\r\n  text-align: center;\r\n  margin-top: 30px;\r\n  padding: 15px;\r\n  background: linear-gradient(to right, rgba(236, 253, 245, 0.8), rgba(229, 246, 253, 0.8));\r\n  border-radius: 12px;\r\n  font-size: 16px;\r\n  color: #2e7d32;\r\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\r\n  position: relative;\r\n  border-left: 4px solid #4caf50;\r\n}\r\n\r\n.plant-companionship::before {\r\n  content: '🌱';\r\n  font-size: 18px;\r\n  margin-right: 8px;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .garden-plants-row {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .garden-plant-item {\r\n    min-width: auto;\r\n    width: 100%;\r\n  }\r\n  \r\n  .plant-avatar {\r\n    width: 140px;\r\n    height: 140px;\r\n  }\r\n  \r\n  .plant-image {\r\n    width: 80%;\r\n    height: 80%;\r\n  }\r\n  \r\n  .plant-actions {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .plant-companionship {\r\n    font-size: 14px;\r\n    padding: 12px;\r\n  }\r\n}\r\n</style> ","import { render } from \"./Garden.vue?vue&type=template&id=ea87d3dc&scoped=true\"\nimport script from \"./Garden.vue?vue&type=script&lang=js\"\nexport * from \"./Garden.vue?vue&type=script&lang=js\"\n\nimport \"./Garden.vue?vue&type=style&index=0&id=ea87d3dc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-ea87d3dc\"]])\n\nexport default __exports__"],"names":["useCurrencyStore","defineStore","state","coins","parseInt","localStorage","getItem","loading","actions","addCoins","amount","this","saveCoins","deductCoins","setItem","toString","resetCoins","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","$setup","myPlants","length","_hoisted_7","_hoisted_8","_hoisted_9","_createVNode","_component_el_empty","description","image","_withCtx","_cache","_","_hoisted_10","_Fragment","_renderList","filteredPlants","plant","id","_normalizeClass","isMainPlant","_hoisted_11","_component_WeatherCanvas","weather","width","height","src","getPlantImage","alt","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","name","_hoisted_16","_component_el_tag","size","type","effect","default","_createTextVNode","_createCommentVNode","_hoisted_17","_hoisted_18","_hoisted_19","level","_component_el_progress","percentage","calculatePlantExp","format","expFormat","_hoisted_20","_hoisted_21","active","title","onClick","$event","updatePlantWeather","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_component_el_button","showDialog","plain","setAsMainPlant","disabled","_hoisted_26","plantDays","completedTasksCount","_component_PlantDialog","messages","plantStore","thoughts","showPlantThoughtDialog","onPrimaryAction","components","WeatherCanvas","PlantDialog","setup","currencyStore","usePlantStore","taskStore","useTaskStore","selectedPlantForDialog","ref","searchPlant","plantImages","plant1Level1","plant1Level2","plant1Level3","plant2Level1","plant2Level2","plant2Level3","plant3Level1","plant3Level2","plant3Level3","plant4Level1","plant4Level2","plant4Level3","plant5Level1","plant5Level2","plant5Level3","trim","clampLevel","Math","min","max","plantTypeImages","allPlants","reactive","emoji","experience","onMounted","async","fetchPlants","existingPlant","plants","find","p","newPlant","createPlant","console","log","error","ElMessage","mainPlant","firstPlant","plantId","_id","updatePlant","fetchTasks","currentExp","value","fallbackPlant","nextLevelExp","round","success","message","fetchPlantThoughts","map","thought","content","timestamp","generatePlantThought","context","growthStage","unshift","prevMainPlantId","computed","search","toLowerCase","filter","includes","createdAt","createdDate","Date","today","diffTime","abs","diffDays","ceil","completedTasks","watch","newMainPlant","immediate","__exports__","render"],"sourceRoot":""}