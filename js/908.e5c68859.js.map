{"version":3,"file":"js/908.e5c68859.js","mappings":"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","sources":["webpack://zhiyuxinsheng/./src/views/PlantChat.vue","webpack://zhiyuxinsheng/./src/views/PlantChat.vue?f5aa"],"sourcesContent":["<template>\n  <div class=\"plant-chat-page\">\n    <div class=\"container\">\n      <div class=\"plant-chat-header card\">\n        <div class=\"plant-avatar\">\n          <img :src=\"getPlantImage(plantStore.currentPlant)\" class=\"plant-image\" alt=\"植物图片\" />\n        </div>\n        <div class=\"plant-info\">\n          <h2>与{{ plantStore.currentPlant ? plantStore.currentPlant.name : '植物' }}对话</h2>\n          <p class=\"plant-status\">\n            <span class=\"status-label\">状态:</span> \n            <span class=\"status-value\">{{ getPlantStatus() }}</span>\n            <span class=\"mood-emoji\">{{ getMoodEmoji() }}</span>\n          </p>\n        </div>\n        <div class=\"plant-level\">\n          <div class=\"level-badge\">Lv.{{ plantStore.currentPlant?.level || 1 }}</div>\n        </div>\n        <div class=\"clear-chat\">\n          <el-button type=\"text\" @click=\"clearConversation\" :disabled=\"!conversations || conversations.length <= 1\">\n            <el-icon><Delete /></el-icon>\n            清空对话\n          </el-button>\n        </div>\n      </div>\n      \n      <div class=\"message-container card\">\n        <div class=\"messages-list\" ref=\"messagesList\">\n          <div v-if=\"!conversations || conversations.length === 0\" class=\"empty-conversation\">\n            <el-empty description=\"暂无对话，发送消息开始与植物聊天吧~\">\n              <template #image>\n                <img src=\"/images/plant_chat_empty.png\" alt=\"空对话\" class=\"empty-img\" />\n              </template>\n            </el-empty>\n          </div>\n          \n          <template v-else>\n            <div \n              v-for=\"message in conversations\" \n              :key=\"message.id\"\n              :class=\"['message', message.sender === 'user' ? 'user-message' : 'plant-message']\"\n            >\n              <div class=\"message-avatar\">\n                <span v-if=\"message.sender === 'user'\" class=\"user-avatar\">\n                  <el-avatar :size=\"40\" :src=\"userAvatar\" />\n                </span>\n                <span v-else class=\"plant-message-avatar\">\n                  <img :src=\"getPlantImage(plantStore.currentPlant)\" class=\"plant-chat-image\" alt=\"植物图片\" />\n                </span>\n              </div>\n              <div class=\"message-bubble\">\n                <div class=\"message-content\">\n                  <!-- 用户消息直接显示 -->\n                  <template v-if=\"message.sender === 'user'\">\n                    {{ message.content }}\n                  </template>\n                  \n                  <!-- 植物消息分段显示或使用打字机效果 -->\n                  <template v-else>\n                    <!-- 判断是否是当前正在打字的消息 -->\n                    <template v-if=\"currentTypingMessageId === message.id\">\n                      <!-- 已显示的段落 -->\n                      <div v-for=\"(segment, index) in displayedSegments\" :key=\"index\" class=\"message-segment\">\n                        {{ segment }}\n                      </div>\n                      <!-- 当前正在打字的段落 -->\n                      <div class=\"typing-segment\">{{ currentTypingText }}</div>\n                      <!-- 后续段落指示器 -->\n                      <div v-if=\"remainingSegmentsCount > 0\" class=\"more-segments-indicator\">\n                        <div class=\"dot-flashing\"></div>\n                      </div>\n                    </template>\n                    <!-- 已完成打字的消息 -->\n                    <template v-else>\n                      <div v-for=\"(segment, index) in splitMessageIntoSegments(message.content)\" \n                           :key=\"index\" \n                           class=\"message-segment\">\n                        {{ segment }}\n                      </div>\n                    </template>\n                  </template>\n                </div>\n                <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n              </div>\n            </div>\n          </template>\n          \n          <div v-if=\"loading\" class=\"typing-indicator\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        </div>\n        \n        <div class=\"input-container\">\n          <div class=\"suggestion-chips\" v-if=\"showSuggestions\">\n            <div \n              v-for=\"(suggestion, index) in suggestions\" \n              :key=\"index\"\n              class=\"suggestion-chip\"\n              @click=\"sendSuggestion(suggestion)\"\n            >\n              {{ suggestion }}\n            </div>\n          </div>\n          \n          <div class=\"input-wrapper\">\n            <el-input\n              v-model=\"messageInput\"\n              type=\"textarea\"\n              :rows=\"1\"\n              :autosize=\"{ minRows: 1, maxRows: 4 }\"\n              placeholder=\"输入消息与植物聊天...\"\n              @keyup.enter.native=\"handleEnterPress\"\n            />\n            <el-button \n              type=\"primary\" \n              class=\"send-btn\" \n              :disabled=\"!messageInput.trim() || loading\"\n              @click=\"sendMessage\"\n            >\n              <el-icon><Position /></el-icon>\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, nextTick, watch, computed } from 'vue'\nimport { usePlantStore } from '../stores/plant'\nimport { useAuthStore } from '../stores/auth'\nimport { format } from 'date-fns'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { Delete, Position } from '@element-plus/icons-vue'\n\n// 导入植物图片\nimport plant1Level1 from '@/assets/images/plant/1-1.png'\nimport plant1Level2 from '@/assets/images/plant/1-2.png'\nimport plant1Level3 from '@/assets/images/plant/1-3.png'\nimport plant2Level1 from '@/assets/images/plant/2-1.png'\nimport plant2Level2 from '@/assets/images/plant/2-2.png'\nimport plant2Level3 from '@/assets/images/plant/2-3.png'\nimport plant3Level1 from '@/assets/images/plant/3-1.png'\nimport plant3Level2 from '@/assets/images/plant/3-2.png'\nimport plant3Level3 from '@/assets/images/plant/3-3.png'\nimport plant4Level1 from '@/assets/images/plant/4-1.png'\nimport plant4Level2 from '@/assets/images/plant/4-2.png'\nimport plant4Level3 from '@/assets/images/plant/4-3.png'\nimport plant5Level1 from '@/assets/images/plant/5-1.png'\nimport plant5Level2 from '@/assets/images/plant/5-2.png'\nimport plant5Level3 from '@/assets/images/plant/5-3.png'\n\nconst plantStore = usePlantStore()\nconst authStore = useAuthStore()\nconst messagesList = ref(null)\nconst messageInput = ref('')\nconst loading = ref(false)\nconst showSuggestions = ref(true)\n\n// 打字机效果相关状态\nconst currentTypingMessageId = ref(null)\nconst currentTypingText = ref('')\nconst displayedSegments = ref([])\nconst remainingSegmentsCount = ref(0)\nconst typeInterval = ref(null)\nconst segmentDisplayInterval = ref(null)\nconst allMessageSegments = ref([])\nconst currentSegmentIndex = ref(0)\nconst typingSpeed = 50 // 打字速度(毫秒/字符)\nconst segmentDelay = 1000 // 段落之间的延迟(毫秒)\n\n// 用户头像\nconst userAvatar = computed(() => {\n  return authStore.userInfo.avatar || 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\n})\n\n// 建议问题\nconst suggestions = [\n  '设置一个任务，提醒我明天早上8点去跑步',\n  '我最近心情不好，你能陪我聊聊吗？',\n  '总计一下最近的学习情况，给我一些规划建议'\n]\n\n// 默认欢迎语\nconst defaultWelcomeMessage = {\n  id: 'welcome',\n  sender: 'plant',\n  content: '你好呀φ(*￣0￣)！我是你的植物伙伴，很高兴能和你聊天。你可以问我任何问题，或者分享你的想法。',\n  timestamp: new Date()\n}\n\n// 计算属性：获取对话信息\nconst conversations = computed(() => {\n  if (!plantStore.conversations || plantStore.conversations.length === 0) {\n    return [defaultWelcomeMessage]\n  }\n  return plantStore.conversations\n})\n\n// 植物图片映射\nconst plantImages = {\n  '玫瑰': {\n    1: plant1Level1,\n    2: plant1Level2,\n    3: plant1Level3\n  },\n  '仙人掌': {\n    1: plant2Level1,\n    2: plant2Level2,\n    3: plant2Level3\n  },\n  '郁金香': {\n    1: plant3Level1,\n    2: plant3Level2,\n    3: plant3Level3\n  },\n  '白百何': {\n    1: plant4Level1,\n    2: plant4Level2,\n    3: plant4Level3\n  },\n  '向日葵': {\n    1: plant5Level1,\n    2: plant5Level2,\n    3: plant5Level3\n  }\n}\n\n// 获取植物图片\nconst getPlantImage = (plant) => {\n  if (!plant || !plant.type) {\n    return plant1Level1 // 返回默认图片\n  }\n\n  const type = plant.type.trim() // 移除可能存在的前后空格\n  const level = plant.level || 1\n  \n  // 检查植物类型和等级限制\n  const clampLevel = Math.min(Math.max(level, 1), 3) // 限制等级在1-3之间\n  \n  // 根据植物类型返回对应图片\n  const plantTypeImages = plantImages[type]\n  if (!plantTypeImages) {\n    return plant1Level1 // 如果找不到对应类型的图片，返回默认图片\n  }\n\n  return plantTypeImages[clampLevel] || plant1Level1 // 如果找不到对应等级的图片，返回默认图片\n}\n\n// 获取植物表情\nconst getPlantEmoji = () => {\n  if (!plantStore.currentPlant) return '🌱'\n  return plantStore.currentPlant.emoji || '🌱'\n}\n\n// 获取植物状态\nconst getPlantStatus = () => {\n  if (!plantStore.currentPlant) return '未种植'\n  \n  const stateMap = {\n    'seedling': '幼苗期',\n    'growing': '成长期',\n    'mature': '成熟期'\n  }\n  \n  return stateMap[plantStore.currentPlant.state] || '成长中'\n}\n\n// 获取心情表情\nconst getMoodEmoji = () => {\n  if (!plantStore.currentPlant) return '😐'\n  \n  const moodMap = {\n    'happy': '😊',\n    'neutral': '😐',\n    'sad': '😢'\n  }\n  \n  return moodMap[plantStore.currentPlant.mood] || '😐'\n}\n\n// 格式化时间\nconst formatTime = (timestamp) => {\n  if (!timestamp) return ''\n  return format(new Date(timestamp), 'HH:mm')\n}\n\n// 处理Enter按键\nconst handleEnterPress = (e) => {\n  // 如果按下了Shift键，不发送消息，允许多行输入\n  if (!e.shiftKey && messageInput.value.trim()) {\n    e.preventDefault()\n    sendMessage()\n  }\n}\n\n// 清空对话\nconst clearConversation = () => {\n  ElMessageBox.confirm('确定要清空所有对话记录吗？此操作不可恢复。', '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    if (!plantStore.currentPlant) return;\n    \n    const plantId = plantStore.currentPlant._id || plantStore.currentPlant.id;\n    try {\n      // 停止任何正在进行的打字效果\n      stopTypingEffect();\n      \n      // 调用清空对话的API\n      await plantStore.clearConversations(plantId);\n      \n      // 设置为默认欢迎消息\n      plantStore.conversations = [defaultWelcomeMessage];\n      ElMessage.success('对话已清空，将开始新的对话');\n    } catch (error) {\n      console.error('清空对话失败:', error);\n      ElMessage.error('清空对话失败');\n    }\n  }).catch(() => {\n    // 用户取消操作\n  });\n}\n\n// 将消息拆分为段落\nconst splitMessageIntoSegments = (message) => {\n  if (!message) return [];\n  // 按双换行或单换行分割\n  return message.split(/\\n\\n|\\n/).filter(segment => segment.trim() !== '');\n}\n\n// 开始打字效果\nconst startTypingEffect = (message) => {\n  // 停止任何正在进行的打字效果\n  stopTypingEffect();\n  \n  // 设置当前正在打字的消息ID\n  currentTypingMessageId.value = message.id;\n  \n  // 将消息拆分为段落\n  allMessageSegments.value = splitMessageIntoSegments(message.content);\n  \n  // 重置状态\n  displayedSegments.value = [];\n  currentSegmentIndex.value = 0;\n  currentTypingText.value = '';\n  remainingSegmentsCount.value = allMessageSegments.value.length;\n  \n  // 开始展示第一段\n  displayNextSegment();\n}\n\n// 显示下一段落\nconst displayNextSegment = () => {\n  if (currentSegmentIndex.value >= allMessageSegments.value.length) {\n    // 所有段落都已显示完成\n    finishTypingMessage();\n    return;\n  }\n  \n  const currentSegment = allMessageSegments.value[currentSegmentIndex.value];\n  let charIndex = 0;\n  \n  // 清除之前的打字效果定时器\n  if (typeInterval.value) clearInterval(typeInterval.value);\n  \n  // 逐字显示当前段落\n  typeInterval.value = setInterval(() => {\n    if (charIndex <= currentSegment.length) {\n      currentTypingText.value = currentSegment.substring(0, charIndex);\n      charIndex++;\n      scrollToBottom();\n    } else {\n      // 当前段落打字完成\n      clearInterval(typeInterval.value);\n      \n      // 将完成的段落添加到已显示段落数组\n      displayedSegments.value.push(currentSegment);\n      currentTypingText.value = '';\n      \n      // 更新剩余段落数\n      remainingSegmentsCount.value--;\n      \n      // 移动到下一段\n      currentSegmentIndex.value++;\n      \n      // 延迟一会儿再显示下一段\n      if (currentSegmentIndex.value < allMessageSegments.value.length) {\n        segmentDisplayInterval.value = setTimeout(displayNextSegment, segmentDelay);\n      } else {\n        // 所有段落都已显示完成\n        finishTypingMessage();\n      }\n    }\n  }, typingSpeed);\n}\n\n// 完成消息的打字效果\nconst finishTypingMessage = () => {\n  // 清除定时器\n  if (typeInterval.value) {\n    clearInterval(typeInterval.value);\n    typeInterval.value = null;\n  }\n  \n  if (segmentDisplayInterval.value) {\n    clearTimeout(segmentDisplayInterval.value);\n    segmentDisplayInterval.value = null;\n  }\n  \n  // 重置状态\n  currentTypingMessageId.value = null;\n}\n\n// 停止任何正在进行的打字效果\nconst stopTypingEffect = () => {\n  if (typeInterval.value) {\n    clearInterval(typeInterval.value);\n    typeInterval.value = null;\n  }\n  \n  if (segmentDisplayInterval.value) {\n    clearTimeout(segmentDisplayInterval.value);\n    segmentDisplayInterval.value = null;\n  }\n  \n  currentTypingMessageId.value = null;\n}\n\n// 发送消息\nconst sendMessage = async () => {\n  if (!messageInput.value.trim() || loading.value) return\n  \n  if (!plantStore.currentPlant) {\n    ElMessage.warning('请先在花园中选择一个植物')\n    return\n  }\n  \n  // 检查用户是否已登录\n  if (!localStorage.getItem('token')) {\n    ElMessage.warning('请先登录再与植物对话')\n    return\n  }\n  \n  // 检查植物ID是否有效\n  if (!plantStore.currentPlant._id && !plantStore.currentPlant.id) {\n    console.error('植物ID无效')\n    ElMessage.warning('植物信息不完整，请重新选择植物')\n    return\n  }\n  \n  const plantId = plantStore.currentPlant._id || plantStore.currentPlant.id\n  const message = messageInput.value\n  \n  // 创建用户消息对象\n  const userMessage = {\n    id: Date.now().toString(),\n    sender: 'user',\n    content: message,\n    timestamp: new Date()\n  }\n  \n  // 立即添加用户消息到对话列表\n  if (!plantStore.conversations) {\n    plantStore.conversations = []\n  }\n  plantStore.conversations.push(userMessage)\n  \n  // 清空输入框\n  messageInput.value = ''\n  \n  // 设置加载状态\n  loading.value = true\n  showSuggestions.value = false\n  \n  try {\n    // 滚动到底部\n    await scrollToBottom()\n    \n    // 调用API发送消息，设置skipUserMessage为true，因为已经添加过用户消息了\n    const response = await plantStore.sendMessage(plantId, message, true)\n    \n    if (!response) {\n      throw new Error('发送消息失败')\n    }\n    \n    // 再次滚动到底部\n    await scrollToBottom()\n    \n    // 启动打字机效果\n    await nextTick()\n    startTypingEffect(response)\n    \n  } catch (error) {\n    console.error('发送消息失败:', error)\n    ElMessage.error('发送消息失败，请稍后再试')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 发送建议问题\nconst sendSuggestion = (suggestion) => {\n  messageInput.value = suggestion\n  sendMessage()\n}\n\n// 滚动到底部\nconst scrollToBottom = async () => {\n  await nextTick()\n  if (messagesList.value) {\n    messagesList.value.scrollTop = messagesList.value.scrollHeight\n  }\n}\n\n// 监听对话列表变化，自动滚动到底部\nwatch(() => plantStore.conversations.length, async () => {\n  await scrollToBottom()\n})\n\n// 监听主植物变化\nwatch(() => plantStore.mainPlant, async (newMainPlant) => {\n  if (newMainPlant) {\n    // 停止任何正在进行的打字效果\n    stopTypingEffect();\n    \n    // 更新当前植物\n    plantStore.currentPlant = newMainPlant;\n    \n    // 重新加载对话历史\n    try {\n      const plantId = newMainPlant._id || newMainPlant.id;\n      if (plantId) {\n        loading.value = true;\n        await plantStore.fetchConversations(plantId);\n        await scrollToBottom();\n      }\n    } catch (error) {\n      console.error('获取对话历史失败:', error);\n      ElMessage.info('获取对话历史失败，请稍后再试')\n    } finally {\n      loading.value = false;\n    }\n  }\n}, { immediate: true });\n\n// 确保在组件挂载时获取用户信息\nonMounted(async () => {\n  // 获取用户信息\n  if (!authStore.user) {\n    await authStore.fetchUserInfo()\n  }\n  \n  // 确保有植物数据\n  if (!plantStore.currentPlant) {\n    await plantStore.fetchPlants()\n  }\n  \n  // 如果有植物，加载对话历史\n  if (plantStore.currentPlant) {\n    // 检查植物ID是否有效\n    if (!plantStore.currentPlant._id && !plantStore.currentPlant.id) {\n      console.error('植物ID无效')\n      ElMessage.warning('植物信息不完整，请重新选择植物')\n      return\n    }\n    \n    const plantId = plantStore.currentPlant._id || plantStore.currentPlant.id\n    loading.value = true\n    \n    try {\n      await plantStore.fetchConversations(plantId)\n      // 如果没有对话历史，添加默认欢迎语\n      if (!plantStore.conversations || plantStore.conversations.length === 0) {\n        plantStore.conversations = [defaultWelcomeMessage]\n      }\n    } catch (error) {\n      console.error('获取对话历史失败:', error)\n      ElMessage.info('获取对话历史失败，请稍后再试')\n    } finally {\n      loading.value = false\n      await scrollToBottom()\n    }\n  }\n  \n  // 组件销毁时清除所有定时器\n  return () => {\n    stopTypingEffect();\n  }\n})\n</script>\n\n<style scoped>\n.plant-chat-page {\n  min-height: 100vh;\n  padding: 20px 0;\n}\n\n.container {\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 0 20px;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 40px);\n}\n\n.card {\n  background-color: rgba(255, 255, 255, 0.95);\n  border-radius: 16px;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  backdrop-filter: blur(4px);\n}\n\n.plant-chat-header {\n  display: flex;\n  align-items: center;\n  padding: 16px 24px;\n  margin-bottom: 16px;\n  position: relative;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.plant-avatar {\n  width: 70px;\n  height: 70px;\n  background: linear-gradient(135deg, rgba(76, 175, 80, 0.2) 0%, rgba(139, 195, 74, 0.2) 100%);\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 20px;\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.2);\n  border: 2px solid rgba(76, 175, 80, 0.3);\n  overflow: hidden;\n}\n\n.plant-image {\n  width: 90%;\n  height: 90%;\n  object-fit: contain;\n}\n\n.plant-info {\n  flex: 1;\n}\n\n.plant-info h2 {\n  margin: 0 0 8px;\n  font-size: 1.5rem;\n  color: #333;\n  font-weight: 600;\n  background: linear-gradient(90deg, #4CAF50, #8BC34A);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.plant-status {\n  display: flex;\n  align-items: center;\n  color: #666;\n  font-size: 0.95rem;\n  margin: 0;\n}\n\n.status-label {\n  margin-right: 5px;\n  color: #888;\n}\n\n.status-value {\n  color: #4CAF50;\n  font-weight: 500;\n}\n\n.mood-emoji {\n  margin-left: 8px;\n  font-size: 1.2rem;\n}\n\n.plant-level {\n  display: flex;\n  align-items: center;\n  margin-right: 15px;\n}\n\n.level-badge {\n  background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%);\n  color: white;\n  font-size: 0.8rem;\n  font-weight: bold;\n  padding: 5px 10px;\n  border-radius: 20px;\n  box-shadow: 0 2px 4px rgba(76, 175, 80, 0.3);\n}\n\n.clear-chat {\n  color: #909399;\n  font-size: 0.85rem;\n}\n\n.clear-chat .el-button {\n  font-size: 0.85rem;\n  padding: 4px 8px;\n  opacity: 0.8;\n  transition: all 0.3s;\n}\n\n.clear-chat .el-button:hover {\n  opacity: 1;\n  color: #f56c6c;\n}\n\n.message-container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n}\n\n.messages-list {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  scroll-behavior: smooth;\n  scrollbar-width: thin;\n  scrollbar-color: rgba(76, 175, 80, 0.3) transparent;\n}\n\n.messages-list::-webkit-scrollbar {\n  width: 6px;\n}\n\n.messages-list::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.messages-list::-webkit-scrollbar-thumb {\n  background-color: rgba(76, 175, 80, 0.3);\n  border-radius: 6px;\n}\n\n.empty-conversation {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.empty-img {\n  width: 150px;\n  opacity: 0.7;\n  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));\n  transition: all 0.3s;\n}\n\n.empty-img:hover {\n  transform: scale(1.05);\n  opacity: 0.9;\n}\n\n.message {\n  display: flex;\n  margin-bottom: 16px;\n  align-items: flex-start;\n}\n\n.user-message {\n  flex-direction: row-reverse;\n}\n\n.message-avatar {\n  margin: 0 12px;\n}\n\n.user-avatar {\n  display: flex;\n  border: 2px solid rgba(64, 158, 255, 0.3);\n  border-radius: 50%;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s;\n}\n\n.user-avatar:hover {\n  transform: scale(1.05);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n}\n\n.plant-message-avatar {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, rgba(76, 175, 80, 0.2) 0%, rgba(139, 195, 74, 0.2) 100%);\n  border-radius: 50%;\n  border: 2px solid rgba(76, 175, 80, 0.3);\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s;\n  overflow: hidden;\n}\n\n.plant-chat-image {\n  width: 90%;\n  height: 90%;\n  object-fit: contain;\n}\n\n.plant-message-avatar:hover {\n  transform: scale(1.05);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n}\n\n.message-bubble {\n  max-width: 70%;\n  padding: 12px 16px;\n  border-radius: 18px;\n  position: relative;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  transition: all 0.3s;\n}\n\n.message-bubble:hover {\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.user-message .message-bubble {\n  background: linear-gradient(135deg, #42a5f5 0%, #64b5f6 100%);\n  color: white;\n  border-top-right-radius: 4px;\n}\n\n.plant-message .message-bubble {\n  background: linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%);\n  color: #333;\n  border-top-left-radius: 4px;\n  border: 1px solid rgba(76, 175, 80, 0.1);\n}\n\n.message-content {\n  font-size: 1rem;\n  line-height: 1.5;\n  word-break: break-word;\n}\n\n.message-time {\n  font-size: 0.7rem;\n  opacity: 0.7;\n  margin-top: 4px;\n  text-align: right;\n}\n\n.typing-indicator {\n  display: inline-flex;\n  align-items: center;\n  background-color: #f0f2f5;\n  padding: 8px 16px;\n  border-radius: 18px;\n  margin: 10px 0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.typing-indicator span {\n  height: 8px;\n  width: 8px;\n  border-radius: 50%;\n  background-color: #4CAF50;\n  display: inline-block;\n  margin: 0 2px;\n  animation: bounce 1.5s infinite ease-in-out;\n}\n\n.typing-indicator span:nth-child(1) {\n  animation-delay: 0s;\n}\n\n.typing-indicator span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.typing-indicator span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes bounce {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-5px);\n  }\n}\n\n.input-container {\n  padding: 15px;\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n  background-color: rgba(255, 255, 255, 0.8);\n  border-radius: 0 0 16px 16px;\n}\n\n.suggestion-chips {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 12px;\n  gap: 4px;\n}\n\n.suggestion-chip {\n  background-color: rgba(76, 175, 80, 0.1);\n  color: #4CAF50;\n  padding: 8px 12px;\n  border-radius: 20px;\n  font-size: 0.85rem;\n  cursor: pointer;\n  transition: all 0.3s;\n  border: 1px solid rgba(76, 175, 80, 0.2);\n}\n\n.suggestion-chip:hover {\n  background-color: rgba(76, 175, 80, 0.2);\n  transform: translateY(-2px);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.input-wrapper {\n  display: flex;\n  align-items: flex-end;\n}\n\n.input-wrapper :deep(.el-textarea__inner) {\n  border-radius: 20px;\n  padding: 12px 18px;\n  min-height: 44px !important;\n  resize: none;\n  border: 1px solid rgba(76, 175, 80, 0.3);\n  transition: all 0.3s;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\n  font-size: 1rem;\n}\n\n.input-wrapper :deep(.el-textarea__inner:focus) {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.send-btn {\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 12px;\n  background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%);\n  border: none;\n  transition: all 0.3s;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n}\n\n.send-btn:hover:not(:disabled) {\n  transform: translateY(-2px) rotate(5deg);\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.4);\n}\n\n.send-btn:disabled {\n  opacity: 0.6;\n  background: linear-gradient(135deg, #9e9e9e 0%, #bdbdbd 100%);\n}\n\n/* 添加新样式 */\n.message-segment {\n  margin-bottom: 8px;\n}\n\n.message-segment:last-child {\n  margin-bottom: 0;\n}\n\n.typing-segment {\n  min-height: 1.5em;\n  display: inline-block;\n  position: relative;\n}\n\n.more-segments-indicator {\n  text-align: center;\n  padding: 5px 0;\n  height: 20px;\n}\n\n.dot-flashing {\n  position: relative;\n  width: 10px;\n  height: 10px;\n  margin: 0 auto;\n  border-radius: 5px;\n  background-color: #4CAF50;\n  color: #4CAF50;\n  animation: dot-flashing 1s infinite linear alternate;\n  animation-delay: 0.5s;\n}\n\n.dot-flashing::before, .dot-flashing::after {\n  content: '';\n  display: inline-block;\n  position: absolute;\n  top: 0;\n}\n\n.dot-flashing::before {\n  left: -15px;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background-color: #4CAF50;\n  color: #4CAF50;\n  animation: dot-flashing 1s infinite alternate;\n  animation-delay: 0s;\n}\n\n.dot-flashing::after {\n  left: 15px;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background-color: #4CAF50;\n  color: #4CAF50;\n  animation: dot-flashing 1s infinite alternate;\n  animation-delay: 1s;\n}\n\n@keyframes dot-flashing {\n  0% {\n    background-color: #4CAF50;\n  }\n  50%, 100% {\n    background-color: rgba(76, 175, 80, 0.2);\n  }\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 0 10px;\n    height: calc(100vh - 20px);\n  }\n  \n  .plant-chat-header {\n    padding: 12px 16px;\n  }\n  \n  .plant-avatar {\n    width: 50px;\n    height: 50px;\n  }\n  \n  .plant-emoji {\n    font-size: 30px;\n  }\n  \n  .plant-info h2 {\n    font-size: 1.2rem;\n  }\n  \n  .message-bubble {\n    max-width: 85%;\n  }\n  \n  .clear-chat {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n  \n  .suggestion-chip {\n    font-size: 0.8rem;\n    padding: 6px 10px;\n  }\n}\n</style>","import script from \"./PlantChat.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PlantChat.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PlantChat.vue?vue&type=style&index=0&id=4ee657a6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4ee657a6\"]])\n\nexport default __exports__"],"names":["typingSpeed","segmentDelay","plantStore","usePlantStore","authStore","useAuthStore","messagesList","ref","messageInput","loading","showSuggestions","currentTypingMessageId","currentTypingText","displayedSegments","remainingSegmentsCount","typeInterval","segmentDisplayInterval","allMessageSegments","currentSegmentIndex","userAvatar","computed","userInfo","avatar","suggestions","defaultWelcomeMessage","id","sender","content","timestamp","Date","conversations","length","plantImages","plant1Level1","plant1Level2","plant1Level3","plant2Level1","plant2Level2","plant2Level3","plant3Level1","plant3Level2","plant3Level3","plant4Level1","plant4Level2","plant4Level3","plant5Level1","plant5Level2","plant5Level3","getPlantImage","plant","type","trim","level","clampLevel","Math","min","max","plantTypeImages","getPlantStatus","currentPlant","stateMap","state","getMoodEmoji","moodMap","mood","formatTime","format","handleEnterPress","e","shiftKey","value","preventDefault","sendMessage","clearConversation","ElMessageBox","confirm","confirmButtonText","cancelButtonText","then","async","plantId","_id","stopTypingEffect","clearConversations","ElMessage","success","error","console","catch","splitMessageIntoSegments","message","split","filter","segment","startTypingEffect","displayNextSegment","finishTypingMessage","currentSegment","charIndex","clearInterval","setInterval","substring","scrollToBottom","push","setTimeout","clearTimeout","warning","localStorage","getItem","userMessage","now","toString","response","Error","nextTick","sendSuggestion","suggestion","scrollTop","scrollHeight","watch","mainPlant","newMainPlant","fetchConversations","info","immediate","onMounted","user","fetchUserInfo","fetchPlants","__exports__"],"sourceRoot":""}