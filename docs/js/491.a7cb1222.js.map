{"version":3,"file":"js/491.a7cb1222.js","mappings":"8NAMO,MAAMA,GAAeC,EAAAA,EAAAA,IAAY,QAAQ,KAE9C,MAAMC,GAAQC,EAAAA,EAAAA,IAAI,IACZC,GAAUD,EAAAA,EAAAA,KAAI,GAGdE,EAAaC,MAAOC,EAAO,SAC/BH,EAAQI,OAAQ,EAChB,IACE,MAAMC,QAAiBC,EAAAA,GAAQC,SAASJ,GAExC,OADAL,EAAMM,MAAQC,EAASP,MAChBO,EAASP,KAClB,CAAE,MAAOU,GAGP,OAFAC,QAAQD,MAAM,UAAWA,GACzBE,EAAAA,GAAUF,MAAM,YACT,EACT,CAAE,QACAR,EAAQI,OAAQ,CAClB,GAIIO,EAAgBT,UACpB,IAEE,MAAMU,EAAe,IAChBC,EACHC,UAAWD,EAASC,YAAa,IAAIC,MAAOC,eAE9CP,QAAQQ,IAAI,gBAAiBL,SAENN,EAAAA,GAAQY,WAAWN,GAE1C,aADMX,KACC,CACT,CAAE,MAAOO,GAGP,OAFAC,QAAQD,MAAM,QAASA,GACvBE,EAAAA,GAAUF,MAAM,eACT,CACT,GAIIW,EAAUjB,MAAOkB,EAASC,EAAS,GAAIC,EAAW,WACzCX,EAAc,CACzBS,UACAC,SACAC,WACAnB,KAAM,YAKJoB,EAAarB,UACjBF,EAAQI,OAAQ,EAChB,IAKE,aAJME,EAAAA,GAAQkB,WAAWC,GAEzB3B,EAAMM,MAAQN,EAAMM,MAAMsB,QAAOC,GAAQA,EAAKC,MAAQH,IACtDf,EAAAA,GAAUmB,QAAQ,SACX,CACT,CAAE,MAAOrB,GAGP,OAFAC,QAAQD,MAAM,UAAWA,GACzBE,EAAAA,GAAUF,MAAM,eACT,CACT,CAAE,QACAR,EAAQI,OAAQ,CAClB,GAII0B,EAAa5B,MAAOuB,EAAIZ,KAC5B,IAEE,MAAMD,EAAe,IAChBC,EAEHC,UAAWD,EAASC,YAAa,IAAIC,MAAOC,eAE9CP,QAAQQ,IAAI,UAAWL,SAEAN,EAAAA,GAAQwB,WAAWL,EAAIb,GAG9C,aAFMX,IACNS,EAAAA,GAAUmB,QAAQ,SACX,CACT,CAAE,MAAOrB,GAGP,OAFAC,QAAQD,MAAM,QAASA,GACvBE,EAAAA,GAAUF,MAAM,eACT,CACT,GAIIuB,EAAOA,KACX9B,GAAY,EAMd,OAFA8B,IAEO,CACLjC,QACAE,UACAC,aACAkB,UACAR,gBACAY,aACAO,aACD,G,ktBCpBH,MAAME,EAAQC,EAMRC,GAAgBC,EAAAA,EAAAA,KAAS,IACtB,IAAIH,EAAMI,SAASC,MAAK,CAACC,EAAGC,KACjC,MAAMC,EAAQ,IAAIzB,KAAKuB,EAAEG,MAAMC,UACzBC,EAAQ,IAAI5B,KAAKwB,EAAEE,MAAMC,UAC/B,OAAOC,EAAQH,CAAK,MAIlBI,IADYhD,EAAAA,EAAAA,MACUG,EAAAA,EAAAA,KAAI,IAC1B8C,GAAe9C,EAAAA,EAAAA,IAAI,MAGnB+C,EAAOC,EAGPC,EAAcC,IAClB,IAAKA,EAAY,MAAO,OACxB,IACE,MAAMC,EAAO,IAAInC,KAAKkC,GACtB,OAAIE,MAAMD,EAAKR,YACbjC,QAAQ2C,KAAK,WAAYH,GAClB,QAEFC,EAAKG,mBAAmB,QAAS,CAAEC,MAAO,QAASC,IAAK,WACjE,CAAE,MAAO/C,GAEP,OADAC,QAAQD,MAAM,WAAYA,GACnB,MACT,GAGIgD,EAAcP,IAClB,IAAKA,EAAY,MAAO,GACxB,IACE,MAAMC,EAAO,IAAInC,KAAKkC,GACtB,OAAIE,MAAMD,EAAKR,YACbjC,QAAQ2C,KAAK,WAAYH,GAClB,IAEFC,EAAKO,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,OAAQ,WACrE,CAAE,MAAOnD,GAEP,OADAC,QAAQD,MAAM,WAAYA,GACnB,EACT,GAIIoD,EAAiBnC,IACrBoB,EAAazC,MAAQqB,EACrBmB,EAAoBxC,OAAQ,CAAI,EAI5BoB,EAAatB,UACb2C,EAAazC,QACf0C,EAAK,cAAeD,EAAazC,OACjCwC,EAAoBxC,OAAQ,EAC5ByC,EAAazC,MAAQ,KACvB,EAIIyD,EAAYC,IAChBhB,EAAK,YAAagB,EAAM,E,ghEC3J1B,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,Q,0xBC6OA,MAAMC,GAAYpE,EAAAA,EAAAA,KAEZqE,GAAiBlE,EAAAA,EAAAA,KAAI,GACrBmE,GAAkBnE,EAAAA,EAAAA,KAAI,GACtBoE,GAAiBpE,EAAAA,EAAAA,KAAI,GACrBqE,GAAmBrE,EAAAA,EAAAA,KAAI,GACvBsE,GAAWtE,EAAAA,EAAAA,IAAI,WACfuE,GAAevE,EAAAA,EAAAA,IAAI,OACnBwE,GAAYxE,EAAAA,EAAAA,KAAI,GAChByE,GAAgBzE,EAAAA,EAAAA,IAAI,MACpB0E,GAAW1E,EAAAA,EAAAA,IAAI,IACf2E,GAAiB3E,EAAAA,EAAAA,IAAI,IACrB4E,GAAgB5E,EAAAA,EAAAA,KAAI,GACpB6E,GAAgB7E,EAAAA,EAAAA,KAAI,GAEpB8E,GAAU9E,EAAAA,EAAAA,IAAI,CAClB+E,MAAO,GACP1D,QAAS,GACTC,OAAQ,GACR0D,YAAa,GACbzD,SAAU,GACV0D,KAAM,GACNC,QAAS,GACT9E,KAAM,YAIF+E,EAAQ,CACZ,CAAEC,MAAO,KAAMC,KAAM,KAAMhF,MAAO,SAClC,CAAE+E,MAAO,KAAMC,KAAM,KAAMhF,MAAO,OAClC,CAAE+E,MAAO,KAAMC,KAAM,KAAMhF,MAAO,SAClC,CAAE+E,MAAO,KAAMC,KAAM,KAAMhF,MAAO,SAClC,CAAE+E,MAAO,KAAMC,KAAM,KAAMhF,MAAO,QAClC,CAAE+E,MAAO,KAAMC,KAAM,KAAMhF,MAAO,aAI9BiF,EAAeC,IACnB,MAAMN,EAAOE,EAAMK,MAAKC,GAAKA,EAAEpF,QAAUkF,IACzC,OAAON,EAAO,GAAGA,EAAKG,SAASH,EAAKI,OAAS,EAAE,EAI3CK,EAAaA,KACjBrB,EAAiBhE,OAASgE,EAAiBhE,KAAK,EAI5CsF,EAAcJ,IAClBT,EAAQzE,MAAM4E,KAAOM,EACrBlB,EAAiBhE,OAAQ,CAAK,EAI1BuF,GAAcxD,EAAAA,EAAAA,KAAS,IACJ,UAAnBkC,EAASjE,MACJyE,EAAQzE,MAAM0E,MAAMc,QAAUf,EAAQzE,MAAMgB,QAAQwE,OAEpDf,EAAQzE,MAAMgB,QAAQwE,SAmE3BC,GAAgB1D,EAAAA,EAAAA,KAAS,KAC7B,IAAK2D,MAAMC,QAAQ/B,EAAUlE,OAE3B,OADAW,QAAQ2C,KAAK,cAAeY,EAAUlE,OAC/B,GAGT,IAAIkG,EAAS,IAAIhC,EAAUlE,OAiB3B,OAdAW,QAAQQ,IAAI,UAAW+E,GAGI,QAAvB1B,EAAalE,QACf4F,EAASA,EAAOtE,QAAOC,GAAQA,EAAKxB,OAASmE,EAAalE,SAI5D4F,EAAO3D,MAAK,CAACC,EAAGC,KACd,MAAMC,EAAQF,EAAE2D,UAAY,IAAIlF,KAAKuB,EAAE2D,WAAWvD,UAAY,EACxDC,EAAQJ,EAAE0D,UAAY,IAAIlF,KAAKwB,EAAE0D,WAAWvD,UAAY,EAC9D,OAAOF,EAAQG,CAAK,IAGfqD,EAAOE,KAAIvE,IAEhBlB,QAAQQ,IAAI,WAAYU,GACxBlB,QAAQQ,IAAI,UAAW,CACrBQ,GAAIE,EAAKC,IACTd,UAAWa,EAAKb,YAIlB,IAAIgE,EAAQnD,EAAKmD,OAAS,GAC1B,IAAKA,EACH,GAAInD,EAAKL,SACPwD,EAAQ,MAAMnD,EAAKL,gBACd,GAAIK,EAAKqD,KAAM,CACpB,MAAMA,EAAOE,EAAMK,MAAKC,GAAKA,EAAEpF,QAAUuB,EAAKqD,OAC9CF,EAAQE,EAAO,GAAGA,EAAKG,SAASH,EAAKI,OAAS,EAChD,MACEN,EAAsB,UAAdnD,EAAKxB,KAAmB,QAAU,GAK9C,IAAIgG,EAAcxE,EAAKP,QACvB,GAAIO,EAAKsD,SAAyB,UAAdtD,EAAKxB,KAAkB,CACzC,MAAMiG,EAAe,CACnB,MAAS,QACT,MAAS,SACT,OAAU,QACV,MAAS,SAEXD,EAAc,GAAGC,EAAazE,EAAKsD,UAAY,OAAOkB,GACxD,CAEA,MAAO,CACL1D,KAAMd,EAAKsE,UACXnB,MAAOA,EACPqB,YAAaA,EACbE,SAAU1E,EAAKN,QAAUM,EAAKN,OAAOiF,OAAS,EAAI3E,EAAKN,OAAO,GAAK,KACnEkF,cAAe5E,EAAKN,QAAU,GAC9BI,GAAIE,EAAKC,IACTyC,SAAU1C,EAAKxB,KAEfmB,SAAUK,EAAKL,SACf0D,KAAMrD,EAAKqD,KACXC,QAAStD,EAAKsD,QACf,GACD,IAIEuB,GAAYtG,gBACV8D,EAAU/D,WAAkC,QAAvBqE,EAAalE,MAAkB,GAAKkE,EAAalE,MAAM,GAIpFqG,EAAAA,EAAAA,IAAMnC,GAAcpE,gBACZsG,IAAW,IAInB,MAAME,GAAYA,KAChB7B,EAAQzE,MAAQ,CACd0E,MAAO,GACP1D,QAAS,GACTC,OAAQ,GACR0D,YAAa,GACbzD,SAAU,GACV0D,KAAM,UACNC,QAAS,QACT9E,KAAMkE,EAASjE,OAGjBqE,EAASrE,MAAQ,GACjB8D,EAAgB9D,OAAQ,EACxB+D,EAAe/D,OAAQ,EACvBgE,EAAiBhE,OAAQ,EACzBmE,EAAUnE,OAAQ,EAClBoE,EAAcpE,MAAQ,IAAI,EAItBoB,GAAatB,UACjB,MAAM2B,QAAgBmC,EAAUzC,WAAWE,GACvCI,GAEF2E,IACF,GAIFG,EAAAA,EAAAA,KAAU,KACRH,IAAW,IAIb,MAAMI,GAA4BC,IAChCnC,EAAetE,MAAQyG,EAAKC,KAAOC,IAAIC,gBAAgBH,EAAKI,KAC5DtC,EAAcvE,OAAQ,CAAI,EAItB8G,GAAoBL,IAEnBhC,EAAQzE,MAAM2E,cACjBF,EAAQzE,MAAM2E,YAAc,IAE9BF,EAAQzE,MAAM2E,YAAYoC,KAAKN,EAAKI,KAGpC,MAAMG,EAAUL,IAAIC,gBAAgBH,EAAKI,KACzCJ,EAAKC,IAAMM,CAAO,EAMdC,GAAoBR,IAExB,GAAIhC,EAAQzE,MAAM2E,YAAa,CAC7B,MAAMuC,EAAQzC,EAAQzE,MAAM2E,YAAYwC,WAAUC,GACzCA,IAAMX,EAAKI,OAEL,IAAXK,GACFzC,EAAQzE,MAAM2E,YAAY0C,OAAOH,EAAO,EAE5C,CAGA,GAAIT,EAAKC,KAAOD,EAAKC,IAAIY,WAAW,QAAS,CAC3C,MAAMC,EAAa9C,EAAQzE,MAAMiB,OAAOuG,QAAQf,EAAKC,MACjC,IAAhBa,GACF9C,EAAQzE,MAAMiB,OAAOoG,OAAOE,EAAY,EAE5C,GAIIE,GAAe3H,UACnB,IAAK2E,EAAQzE,MAAM2E,aAAoD,IAArCF,EAAQzE,MAAM2E,YAAYuB,OAC1D,MAAO,GAGT1B,EAAcxE,OAAQ,EACtB,IACEK,QAAQQ,IAAI,aAAc4D,EAAQzE,MAAM2E,YAAYuB,QAGpD,MAAMwB,QAAkBC,EAAAA,EAAOC,oBAAoBnD,EAAQzE,MAAM2E,aAQjE,OANAtE,QAAQQ,IAAI,gBAAiB6G,GAG7BjD,EAAQzE,MAAM2E,YAAc,GAGrB+C,GAAa,EACtB,CAAE,MAAOtH,GAGP,OAFAC,QAAQD,MAAM,UAAWA,GACzBE,EAAAA,GAAUF,MAAM,WAAWA,EAAMyH,SAAW,UACrC,EACT,CAAE,QACArD,EAAcxE,OAAQ,CACxB,GAII8H,GAAiBA,KACrBC,SAASC,eAAe,mBAAmBC,eAAe,CAAEC,SAAU,UAAW,GAInF7B,EAAAA,EAAAA,IAAMpC,GAAWkE,IACf1D,EAAQzE,MAAMD,KAAOoI,EACrB9H,QAAQQ,IAAI,SAAUsH,EAAO,IAI/B,MAAMC,GAAiBA,CAACrI,EAAO,aAC7BoE,EAAUnE,OAAQ,EAClBoE,EAAcpE,MAAQ,KACtBiE,EAASjE,MAAQD,EACjB0E,EAAQzE,MAAQ,CACd0E,MAAO,GACP1D,QAAS,GACTC,OAAQ,GACR0D,YAAa,GACbzD,SAAU,GACV0D,KAAM,UACNC,QAAS,QACT9E,KAAMA,GAGRsE,EAASrE,MAAQ,GACjB6D,EAAe7D,OAAQ,CAAI,EAIvByD,GAAYlC,IAChB4C,EAAUnE,OAAQ,EAClBoE,EAAcpE,MAAQuB,EAAKF,GAC3B4C,EAASjE,MAAQuB,EAAK0C,SAGtBQ,EAAQzE,MAAQ,CACd0E,MAAOnD,EAAKmD,MACZ1D,QAASO,EAAKwE,YACd9E,OAAQM,EAAK4E,eAAiB,GAC9BxB,YAAa,GACbzD,SAAUK,EAAKL,UAAY,GAC3B0D,KAAMrD,EAAKqD,MAAQ,GACnBC,QAAStD,EAAKsD,SAAW,GACzB9E,KAAMwB,EAAK0C,SACXvD,UAAWa,EAAKc,MAIlBgC,EAASrE,OAASuB,EAAK4E,eAAiB,IAAIL,KAAI,CAACY,EAAKQ,KAC7C,CACLmB,KAAM,OAAOnB,EAAQ,IACrBR,IAAKA,EACL4B,OAAQ,cAKR7D,EAAQzE,MAAMkB,WAChB4C,EAAgB9D,OAAQ,GAEtByE,EAAQzE,MAAM6E,UAChBd,EAAe/D,OAAQ,GAGzB6D,EAAe7D,OAAQ,CAAI,EAIvBuI,GAAezI,UACnB,GAAKyF,EAAYvF,MAEjB,IAEE,MAAMwI,EAAkBC,EAAAA,GAAUC,QAAQ,CACxCC,MAAM,EACN3D,KAAM,qBACN4D,WAAY,uBAId,IAAIlB,EAAY,GACZjD,EAAQzE,MAAM2E,aAAeF,EAAQzE,MAAM2E,YAAYuB,OAAS,IAClEwB,QAAkBD,MAIpB,IAAIoB,EAAa,IAAKpE,EAAQzE,MAAMiB,QAAU,IAG9C4H,EAAa,IAAIA,KAAenB,GAEhC,MAAMjH,EAAW,IACZgE,EAAQzE,MACXiB,OAAQ4H,EAERnI,UAAWyD,EAAUnE,MAAQyE,EAAQzE,MAAMU,WAAY,IAAIC,MAAOC,eAQpE,IAAIa,SAJGhB,EAASkE,YAEhBtE,QAAQQ,IAAI,aAAcJ,GAIxBgB,EADE0C,EAAUnE,YACI4D,EAAUlC,WAAW0C,EAAcpE,MAAOS,SAE1CmD,EAAUrD,cAAcE,GAI1C+H,EAAgBM,QAEZrH,IAEF6E,KACAzC,EAAe7D,OAAQ,QAEjBoG,KAEN9F,EAAAA,GAAUmB,QAAQ0C,EAAUnE,MAAQ,OAAS,QAEjD,CAAE,MAAOI,GACPC,QAAQD,MAAM,QAASA,GACvBE,EAAAA,GAAUF,MAAM,aAClB,G,siOCxqBF,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,YAAY,qBAEvE,S,uECJA,MAAMuH,EAAS,CAKboB,YAAAA,GACE,OAAOC,EAAAA,GAAIC,IAAI,cACjB,EAOAC,YAAAA,CAAaC,EAAM,UACjB,OAAOH,EAAAA,GAAIC,IAAI,cAAe,CAAEG,OAAQ,CAAED,QAC5C,EAQA,gBAAME,CAAW5C,EAAM0C,EAAM,UAC3B,IAEE,MAAMG,QAAkBC,KAAKL,aAAaC,GACpCK,EAASF,EAAUE,OAEzB,IAAKA,EACH,MAAM,IAAIC,MAAM,YAIlB,IAAIC,EAAOF,EAAOE,KACE,kBAATA,IACTrJ,QAAQD,MAAM,oBAAqBsJ,GAEnCA,EAAO,WAAWF,EAAOG,UAAUH,EAAOI,uBAIvCF,EAAKpC,WAAW,UACnBoC,EAAO,WAAWA,KAIpB,MAAMG,EAAW,IAAIC,SACfC,EAAM,GAAGP,EAAOO,MAAMtD,EAAK4B,KAAK2B,UAAUvD,EAAK4B,KAAK4B,YAAY,QAEtEJ,EAASK,OAAO,MAAOH,GACvBF,EAASK,OAAO,iBAAkBV,EAAOW,aACzCN,EAASK,OAAO,SAAUV,EAAOY,cACjCP,EAASK,OAAO,YAAaV,EAAOa,WACpCR,EAASK,OAAO,wBAAyB,OACzCL,EAASK,OAAO,OAAQzD,GAExBpG,QAAQQ,IAAI,WAAY6I,SAGlBY,IAAAA,KAAWZ,EAAMG,EAAU,CAC/BU,QAAS,CACP,eAAgB,yBAKpB,IAAIC,EAAUhB,EAAOgB,SAAWd,EACT,kBAAZc,IACTA,EAAUd,GAIZ,MAAMe,EAAU,GAAGD,KAAWT,IAG9B,OAFA1J,QAAQQ,IAAI,cAAe4J,GAEpBA,CACT,CAAE,MAAOrK,GAEP,MADAC,QAAQD,MAAM,cAAeA,GACvBA,CACR,CACF,EAQA,yBAAMwH,CAAoB8C,EAAOvB,EAAM,UACrC,IAAKuB,GAA0B,IAAjBA,EAAMxE,OAClB,MAAO,GAGT,IAEE,MAAMoD,QAAkBC,KAAKL,aAAaC,GACpCK,EAASF,EAAUE,OAEzB,IAAKA,EACH,MAAM,IAAIC,MAAM,YAIlB,IAAIC,EAAOF,EAAOE,KACE,kBAATA,IACTrJ,QAAQD,MAAM,oBAAqBsJ,GAEnCA,EAAO,WAAWF,EAAOG,UAAUH,EAAOI,uBAIvCF,EAAKpC,WAAW,UACnBoC,EAAO,WAAWA,KAGpBrJ,QAAQQ,IAAI,aAAc6I,GAG1B,MAAMiB,EAAiBD,EAAM5E,KAAIhG,MAAO2G,EAAMS,KAC5C,IACE,MAAM2C,EAAW,IAAIC,SACfC,EAAM,GAAGP,EAAOO,OAAO7C,IAAQT,EAAK4B,KAAK2B,UAAUvD,EAAK4B,KAAK4B,YAAY,QAE/EJ,EAASK,OAAO,MAAOH,GACvBF,EAASK,OAAO,iBAAkBV,EAAOW,aACzCN,EAASK,OAAO,SAAUV,EAAOY,cACjCP,EAASK,OAAO,YAAaV,EAAOa,WACpCR,EAASK,OAAO,wBAAyB,OACzCL,EAASK,OAAO,OAAQzD,SAElB6D,IAAAA,KAAWZ,EAAMG,EAAU,CAC/BU,QAAS,CACP,eAAgB,yBAKpB,IAAIC,EAAUhB,EAAOgB,SAAWd,EACT,kBAAZc,IACTA,EAAUd,GAGZ,MAAMe,EAAU,GAAGD,KAAWT,IAE9B,OADA1J,QAAQQ,IAAI,MAAMqG,EAAM,KAAKwD,EAAMxE,eAAgBuE,GAC5CA,CACT,CAAE,MAAOrK,GAEP,MADAC,QAAQD,MAAM,MAAM8G,EAAM,KAAKwD,EAAMxE,eAAgB9F,GAC/CA,CACR,KAIIwK,QAAiBC,QAAQC,IAAIH,GAEnC,OADAtK,QAAQQ,IAAI,kBAAmB+J,GACxBA,CACT,CAAE,MAAOxK,GAEP,MADAC,QAAQD,MAAM,gBAAiBA,GACzBA,CACR,CACF,GAGF,K","sources":["webpack://zhiyuxinsheng/./src/stores/post.js","webpack://zhiyuxinsheng/./src/components/TimeLinePage.vue","webpack://zhiyuxinsheng/./src/components/TimeLinePage.vue?9cfd","webpack://zhiyuxinsheng/./src/views/Posts.vue","webpack://zhiyuxinsheng/./src/views/Posts.vue?709c","webpack://zhiyuxinsheng/./src/services/ossApi.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { usePlantStore } from './plant'\r\nimport { postApi } from '../services/api'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport const usePostStore = defineStore('post', () => {\r\n  // 所有帖子数据\r\n  const posts = ref([])\r\n  const loading = ref(false)\r\n\r\n  // 获取所有帖子\r\n  const fetchPosts = async (type = 'all') => {\r\n    loading.value = true\r\n    try {\r\n      const response = await postApi.getPosts(type)\r\n      posts.value = response.posts\r\n      return response.posts\r\n    } catch (error) {\r\n      console.error('获取帖子失败:', error)\r\n      ElMessage.error('获取帖子列表失败')\r\n      return []\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  // 添加自定义帖子（支持日记和说说）\r\n  const addCustomPost = async (postData) => {\r\n    try {\r\n      // 确保有创建时间字段，如果已经有就用原来的，没有则设置为当前时间\r\n      const dataToSubmit = {\r\n        ...postData,\r\n        createdAt: postData.createdAt || new Date().toISOString()\r\n      };\r\n      console.log('准备提交到后端的帖子数据:', dataToSubmit);\r\n      \r\n      const response = await postApi.createPost(dataToSubmit);\r\n      await fetchPosts();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('发布失败:', error);\r\n      ElMessage.error('发布失败，请稍后再试');\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // 兼容旧的添加说说方法\r\n  const addPost = async (content, images = [], location = '') => {\r\n    return await addCustomPost({\r\n      content,\r\n      images,\r\n      location,\r\n      type: 'thought'\r\n    })\r\n  }\r\n  \r\n  // 删除帖子\r\n  const removePost = async (id) => {\r\n    loading.value = true\r\n    try {\r\n      await postApi.deletePost(id)\r\n      // 更新本地状态\r\n      posts.value = posts.value.filter(post => post._id !== id)\r\n      ElMessage.success('删除成功')\r\n      return true\r\n    } catch (error) {\r\n      console.error('删除帖子失败:', error)\r\n      ElMessage.error('删除失败，请稍后再试')\r\n      return false\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新帖子\r\n  const updatePost = async (id, postData) => {\r\n    try {\r\n      // 确保保留原始创建时间\r\n      const dataToSubmit = {\r\n        ...postData,\r\n        // 如果提供了创建时间就使用它，否则使用当前时间\r\n        createdAt: postData.createdAt || new Date().toISOString()\r\n      };\r\n      console.log('更新帖子数据:', dataToSubmit);\r\n      \r\n      const response = await postApi.updatePost(id, dataToSubmit);\r\n      await fetchPosts();\r\n      ElMessage.success('更新成功');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('更新失败:', error);\r\n      ElMessage.error('更新失败，请稍后再试');\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // 初始化时加载帖子\r\n  const init = () => {\r\n    fetchPosts()\r\n  }\r\n  \r\n  // 自动初始化\r\n  init()\r\n  \r\n  return {\r\n    posts,\r\n    loading,\r\n    fetchPosts,\r\n    addPost,\r\n    addCustomPost,\r\n    removePost,\r\n    updatePost\r\n  }\r\n}) ","<!-- Timeline.vue -->\r\n<template>\r\n  <div class=\"timeline-container\">\r\n    <div class=\"timeline\">\r\n      <div v-for=\"(story, index) in sortedStories\" :key=\"story.id\" class=\"timeline-item\">\r\n        <div class=\"timeline-date\">\r\n          <div class=\"date-bubble\">{{ formatDate(story.time) }}</div>\r\n          <div class=\"time-text\">{{ formatTime(story.time) }}</div>\r\n        </div>\r\n        \r\n        <div class=\"timeline-content\" :class=\"{ 'is-diary': story.postType === 'diary' }\">\r\n          <!-- 帖子类型标签 -->\r\n          <div class=\"post-type-tag\" :class=\"{ 'diary': story.postType === 'diary' }\">\r\n            {{ story.postType === 'diary' ? '日记' : '说说' }}\r\n          </div>\r\n          \r\n          <!-- 帖子标题区域，只有在标题存在时显示 -->\r\n          <div v-if=\"story.title && (story.postType === 'diary' || story.title.trim() !== '')\" class=\"content-header\">\r\n            <h3 class=\"content-title\">{{ story.title }}</h3>\r\n          </div>\r\n          \r\n          <!-- 帖子内容 -->\r\n          <div class=\"content-body\">\r\n            <p class=\"content-text\">{{ story.description }}</p>\r\n            \r\n            <!-- 图片展示区域 -->\r\n            <div v-if=\"story.imageSrc\" class=\"content-images\">\r\n              <el-image\r\n                :src=\"story.imageSrc\"\r\n                :preview-src-list=\"story.galleryImages || [story.imageSrc]\"\r\n                fit=\"cover\"\r\n                class=\"content-image\"\r\n              />\r\n              \r\n              <div v-if=\"(story.galleryImages?.length || 0) > 1\" class=\"image-count\">\r\n                +{{ story.galleryImages.length - 1 }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 帖子底部区域 -->\r\n          <div class=\"content-footer\">\r\n            <div class=\"post-actions\">\r\n              <el-button \r\n                size=\"small\" \r\n                type=\"primary\" \r\n                text \r\n                @click=\"editPost(story)\"\r\n              >\r\n                编辑\r\n              </el-button>\r\n              <el-button \r\n                size=\"small\" \r\n                type=\"danger\" \r\n                text \r\n                @click=\"confirmDelete(story.id)\"\r\n              >\r\n                删除\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 空状态 -->\r\n      <div v-if=\"stories.length === 0\" class=\"empty-timeline\">\r\n        <el-empty description=\"还没有内容，快来发布一条吧！\"></el-empty>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 删除确认框 -->\r\n    <el-dialog\r\n      v-model=\"deleteDialogVisible\"\r\n      title=\"确认删除\"\r\n      width=\"300px\"\r\n    >\r\n      <span>确定要删除这条记录吗？</span>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\r\n          <el-button type=\"danger\" @click=\"deletePost\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue'\r\nimport { usePostStore } from '../stores/post'\r\nimport { Delete, Edit } from '@element-plus/icons-vue'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst props = defineProps({\r\n  stories: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n})\r\nconst sortedStories = computed(() => {\r\n  return [...props.stories].sort((a, b) => {\r\n    const dateA = new Date(a.time).getTime()\r\n    const dateB = new Date(b.time).getTime()\r\n    return dateB - dateA // 降序排列（最新在前）\r\n  })\r\n})\r\nconst postStore = usePostStore()\r\nconst deleteDialogVisible = ref(false)\r\nconst postToDelete = ref(null)\r\n\r\n// 定义事件\r\nconst emit = defineEmits(['delete-post', 'edit-post'])\r\n\r\n// 删除不需要的方法\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return '未知时间'\r\n  try {\r\n    const date = new Date(dateString)\r\n    if (isNaN(date.getTime())) {\r\n      console.warn('无效的日期格式:', dateString)\r\n      return '无效时间'\r\n    }\r\n    return date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' })\r\n  } catch (error) {\r\n    console.error('日期格式化错误:', error)\r\n    return '无效时间'\r\n  }\r\n}\r\n\r\nconst formatTime = (dateString) => {\r\n  if (!dateString) return ''\r\n  try {\r\n    const date = new Date(dateString)\r\n    if (isNaN(date.getTime())) {\r\n      console.warn('无效的时间格式:', dateString)\r\n      return ''\r\n    }\r\n    return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' })\r\n  } catch (error) {\r\n    console.error('时间格式化错误:', error)\r\n    return ''\r\n  }\r\n}\r\n\r\n// 打开删除确认框\r\nconst confirmDelete = (id) => {\r\n  postToDelete.value = id\r\n  deleteDialogVisible.value = true\r\n}\r\n\r\n// 删除帖子\r\nconst deletePost = async () => {\r\n  if (postToDelete.value) {\r\n    emit('delete-post', postToDelete.value);\r\n    deleteDialogVisible.value = false\r\n    postToDelete.value = null\r\n  }\r\n}\r\n\r\n// 编辑帖子\r\nconst editPost = (story) => {\r\n  emit('edit-post', story)\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.timeline-container {\r\n  padding: 20px 0;\r\n}\r\n\r\n.timeline {\r\n  position: relative;\r\n  padding: 20px 0;\r\n}\r\n\r\n.timeline::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 80px;\r\n  width: 2px;\r\n  background: #e4e7ed;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  display: flex;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.timeline-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.timeline-date {\r\n  width: 160px;\r\n  padding-right: 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  padding-top: 5px;\r\n}\r\n\r\n.date-bubble {\r\n  background: #f0f9ff;\r\n  border-radius: 16px;\r\n  padding: 4px 12px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #409EFF;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.time-text {\r\n  font-size: 12px;\r\n  color: #909399;\r\n}\r\n\r\n.timeline-content {\r\n  flex: 1;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);\r\n  padding: 16px;\r\n  margin-left: 20px;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n  border-left: 3px solid #67c23a;\r\n}\r\n\r\n.timeline-content.is-diary {\r\n  border-left-color: #409EFF;\r\n}\r\n\r\n.timeline-content::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 12px;\r\n  height: 12px;\r\n  background: #67c23a;\r\n  border-radius: 50%;\r\n  left: -27px;\r\n  top: 18px;\r\n}\r\n\r\n.timeline-content.is-diary::before {\r\n  background: #409EFF;\r\n}\r\n\r\n.post-type-tag {\r\n  position: absolute;\r\n  top: -10px;\r\n  right: 20px;\r\n  background: #67c23a;\r\n  color: white;\r\n  padding: 2px 10px;\r\n  border-radius: 12px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n}\r\n\r\n.post-type-tag.diary {\r\n  background: #409EFF;\r\n}\r\n\r\n.content-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.content-title {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #303133;\r\n}\r\n\r\n.content-body {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.content-text {\r\n  margin: 0 0 16px 0;\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  color: #606266;\r\n  white-space: pre-line;\r\n}\r\n\r\n.content-images {\r\n  position: relative;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  width: fit-content;\r\n}\r\n\r\n.content-image {\r\n  width: 240px;\r\n  height: 160px;\r\n  object-fit: cover;\r\n  border-radius: 8px;\r\n}\r\n\r\n.image-count {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  color: white;\r\n  border-radius: 12px;\r\n  padding: 2px 8px;\r\n  font-size: 12px;\r\n}\r\n\r\n.content-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  padding-top: 8px;\r\n  border-top: 1px solid #f0f2f5;\r\n}\r\n\r\n.post-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n  opacity: 0.6;\r\n  transition: opacity 0.3s;\r\n}\r\n\r\n.post-actions:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.timeline-content:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.empty-timeline {\r\n  padding: 40px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .timeline::before {\r\n    left: 30px;\r\n  }\r\n  \r\n  .timeline-date {\r\n    width: 90px;\r\n    padding-right: 20px;\r\n  }\r\n  \r\n  .date-bubble {\r\n    padding: 2px 8px;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .timeline-content {\r\n    margin-left: 10px;\r\n  }\r\n  \r\n  .timeline-content::before {\r\n    left: -17px;\r\n  }\r\n  \r\n  .content-image {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n}\r\n</style>","import script from \"./TimeLinePage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TimeLinePage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TimeLinePage.vue?vue&type=style&index=0&id=c7c831cc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-c7c831cc\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"posts-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">心情空间</h1>\r\n      <p class=\"page-subtitle\">记录生活的点滴，分享心情的瞬间</p>\r\n    </div>\r\n    \r\n    <div class=\"content-card\">\r\n      <div class=\"thought-input-area\" @click=\"openPostDialog('thought')\">\r\n        <div class=\"thought-input-placeholder\">\r\n          <el-icon><Edit /></el-icon>\r\n          <span>写下心中碎碎念...</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"filter-tabs\">\r\n        <div \r\n          class=\"filter-tab\" \r\n          :class=\"{ active: activeFilter === 'all' }\"\r\n          @click=\"activeFilter = 'all'\"\r\n        >\r\n          全部\r\n        </div>\r\n        <div \r\n          class=\"filter-tab\" \r\n          :class=\"{ active: activeFilter === 'diary' }\"\r\n          @click=\"activeFilter = 'diary'\"\r\n        >\r\n          日记\r\n        </div>\r\n        <div \r\n          class=\"filter-tab\" \r\n          :class=\"{ active: activeFilter === 'thought' }\"\r\n          @click=\"activeFilter = 'thought'\"\r\n        >\r\n          说说\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n    \r\n    <div class=\"timeline-wrapper\">\r\n      <TimeLinePage \r\n        :stories=\"filteredPosts\" \r\n        @delete-post=\"deletePost\"\r\n        @edit-post=\"editPost\"\r\n      ></TimeLinePage>\r\n    </div>\r\n    \r\n    <!-- 新增/编辑说说/日记对话框 -->\r\n    <el-dialog\r\n      v-model=\"showPostDialog\"\r\n      :title=\"isEditing ? (postType === 'diary' ? '编辑日记' : '编辑说说') : (postType === 'diary' ? '写日记' : '发说说')\"\r\n      width=\"65%\"\r\n      custom-class=\"post-dialog\"\r\n      destroy-on-close\r\n      :fullscreen=\"false\"\r\n    >\r\n      <div class=\"post-type-selector\">\r\n        <div \r\n          class=\"post-type-option\" \r\n          :class=\"{ active: postType === 'thought' }\"\r\n          @click=\"postType = 'thought'\"\r\n        >\r\n          <el-icon><ChatDotRound /></el-icon>\r\n          <span>说说</span>\r\n        </div>\r\n        <div \r\n          class=\"post-type-option\" \r\n          :class=\"{ active: postType === 'diary' }\"\r\n          @click=\"postType = 'diary'\"\r\n        >\r\n          <el-icon><Notebook /></el-icon>\r\n          <span>日记</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"diary-header\" v-if=\"postType === 'diary'\">\r\n        <div class=\"diary-date\">\r\n          <div class=\"diary-day\">{{ new Date().getDate() }}</div>\r\n          <div class=\"diary-month-year\">{{ new Date().toLocaleDateString('zh-CN', { month: 'long', year: 'numeric' }) }}</div>\r\n        </div>\r\n        <div class=\"diary-weather-mood\" v-if=\"newPost.weather || newPost.mood\">\r\n          <span v-if=\"newPost.weather\" class=\"diary-weather\">\r\n            {{ {sunny: '☀️ 晴天', rainy: '🌧️ 下雨', cloudy: '☁️ 多云', snowy: '❄️ 下雪'}[newPost.weather] || '' }}\r\n          </span>\r\n          <span v-if=\"newPost.mood\" class=\"diary-mood\">{{ getMoodText(newPost.mood) }}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <el-form class=\"diary-form\">\r\n        <el-form-item v-if=\"postType === 'diary'\" class=\"diary-title-item\">\r\n          <el-input\r\n            v-model=\"newPost.title\"\r\n            placeholder=\"给今天写个标题...\"\r\n            :prefix-icon=\"Document\"\r\n            class=\"diary-title-input\"\r\n            :size=\"postType === 'diary' ? 'large' : 'default'\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item class=\"diary-content-item\">\r\n          <el-input\r\n            v-model=\"newPost.content\"\r\n            type=\"textarea\"\r\n            :rows=\"postType === 'diary' ? 10 : 6\"\r\n            :placeholder=\"postType === 'diary' ? '今天发生了什么...\\n\\n写下此刻的心情，记录生活的点滴...' : '此刻的想法...'\"\r\n            class=\"diary-content\"\r\n            resize=\"none\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <div class=\"diary-toolbar\" v-if=\"postType === 'diary'\">\r\n          <div class=\"toolbar-group\">\r\n          <div class=\"option-item\" @click=\"toggleMood\">\r\n            <el-icon><StarFilled /></el-icon>\r\n            <span>{{ newPost.mood ? `心情：${getMoodText(newPost.mood)}` : '添加心情' }}</span>\r\n          </div>\r\n          \r\n          <div class=\"option-item\" @click=\"locationVisible = !locationVisible\">\r\n            <el-icon><Location /></el-icon>\r\n            <span>{{ locationVisible ? '隐藏位置' : '添加位置' }}</span>\r\n          </div>\r\n          \r\n            <div class=\"option-item\" @click=\"weatherVisible = !weatherVisible\">\r\n            <el-icon><Sunny /></el-icon>\r\n            <span>{{ weatherVisible ? '隐藏天气' : '添加天气' }}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"toolbar-group\">\r\n            <div class=\"diary-image-count\" v-if=\"newPost.images.length > 0\">\r\n              已添加 {{ newPost.images.length }} 张图片\r\n            </div>\r\n            <el-button size=\"small\" @click=\"scrollToUpload\">添加图片</el-button>\r\n          </div>\r\n        </div>\r\n        \r\n        <el-form-item v-if=\"postType !== 'diary'\" class=\"thought-options\">\r\n          <div class=\"post-options\">\r\n            <div class=\"option-item\" @click=\"toggleMood\">\r\n              <el-icon><StarFilled /></el-icon>\r\n              <span>{{ newPost.mood ? `心情：${getMoodText(newPost.mood)}` : '添加心情' }}</span>\r\n            </div>\r\n            \r\n            <div class=\"option-item\" @click=\"locationVisible = !locationVisible\">\r\n              <el-icon><Location /></el-icon>\r\n              <span>{{ locationVisible ? '隐藏位置' : '添加位置' }}</span>\r\n            </div>\r\n          </div>\r\n        </el-form-item>\r\n        \r\n        <el-form-item v-if=\"locationVisible\">\r\n          <el-input \r\n            v-model=\"newPost.location\" \r\n            placeholder=\"我在哪里...\" \r\n            :prefix-icon=\"Location\"\r\n            class=\"location-input\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item v-if=\"weatherVisible && postType === 'diary'\" class=\"weather-selector\">\r\n          <div class=\"weather-options\">\r\n            <div \r\n              v-for=\"(label, value) in { sunny: '☀️ 晴天', rainy: '🌧️ 下雨', cloudy: '☁️ 多云', snowy: '❄️ 下雪' }\" \r\n              :key=\"value\"\r\n              class=\"weather-option\"\r\n              :class=\"{ active: newPost.weather === value }\"\r\n              @click=\"newPost.weather = value\"\r\n            >\r\n              <span class=\"weather-icon\">{{ label.split(' ')[0] }}</span>\r\n              <span>{{ label.split(' ')[1] }}</span>\r\n            </div>\r\n          </div>\r\n        </el-form-item>\r\n        \r\n        <el-form-item v-if=\"showMoodSelector\" class=\"mood-item\">\r\n          <div class=\"mood-selector\">\r\n            <div \r\n              v-for=\"mood in moods\" \r\n              :key=\"mood.value\" \r\n              class=\"mood-item\"\r\n              :class=\"{ active: newPost.mood === mood.value }\"\r\n              @click=\"selectMood(mood.value)\"\r\n            >\r\n              <span class=\"mood-emoji\">{{ mood.emoji }}</span>\r\n              <span class=\"mood-text\">{{ mood.text }}</span>\r\n            </div>\r\n          </div>\r\n        </el-form-item>\r\n        \r\n        <el-form-item id=\"upload-section\">\r\n          <div class=\"upload-area\" :class=\"{ 'diary-upload': postType === 'diary' }\">\r\n            <div class=\"upload-title\" v-if=\"postType === 'diary'\">添加图片记录美好瞬间</div>\r\n            <el-upload\r\n              action=\"#\"\r\n              list-type=\"picture-card\"\r\n              :auto-upload=\"false\"\r\n              :on-change=\"handleFileChange\"\r\n              :on-remove=\"handleFileRemove\"\r\n              :file-list=\"fileList\"\r\n              :on-preview=\"handlePictureCardPreview\"\r\n            >\r\n              <template #default>\r\n                <el-icon class=\"upload-icon\"><Plus /></el-icon>\r\n                <span class=\"upload-text\">添加图片</span>\r\n              </template>\r\n            </el-upload>\r\n            <el-dialog v-model=\"dialogVisible\">\r\n              <img w-full :src=\"dialogImageUrl\" alt=\"预览图片\" />\r\n            </el-dialog>\r\n          </div>\r\n        </el-form-item>\r\n      </el-form>\r\n      \r\n      <template #footer>\r\n        <div class=\"dialog-footer\">\r\n          <el-button @click=\"showPostDialog = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleSubmit\" :disabled=\"!isPostValid\" :size=\"postType === 'diary' ? 'large' : 'default'\">\r\n            {{ isEditing ? '保存修改' : (postType === 'diary' ? '保存日记' : '发布说说') }}\r\n          </el-button>\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, onMounted } from 'vue'\r\nimport { usePostStore } from '../stores/post'\r\nimport { format } from 'date-fns'\r\nimport { \r\n  Plus, \r\n  Location, \r\n  Edit, \r\n  Document,\r\n  ChatDotRound, \r\n  Notebook,\r\n  StarFilled,\r\n  Sunny\r\n} from '@element-plus/icons-vue'\r\nimport { ElMessage, ElLoading } from 'element-plus'\r\nimport TimeLinePage from '@/components/TimeLinePage.vue'\r\nimport ossApi from '@/services/ossApi' // 导入OSS API服务\r\n\r\nconst postStore = usePostStore()\r\n\r\nconst showPostDialog = ref(false)\r\nconst locationVisible = ref(false)\r\nconst weatherVisible = ref(false)\r\nconst showMoodSelector = ref(false)\r\nconst postType = ref('thought')\r\nconst activeFilter = ref('all')\r\nconst isEditing = ref(false)\r\nconst editingPostId = ref(null)\r\nconst fileList = ref([]) // 文件列表\r\nconst dialogImageUrl = ref('') // 预览图片URL\r\nconst dialogVisible = ref(false) // 预览对话框显示状态\r\nconst uploadLoading = ref(false) // 上传加载状态\r\n\r\nconst newPost = ref({\r\n  title: '',\r\n  content: '',\r\n  images: [],\r\n  uploadFiles: [], // 清空上传文件列表\r\n  location: '',\r\n  mood: '',\r\n  weather: '',\r\n  type: 'thought'\r\n})\r\n\r\n// 心情选项\r\nconst moods = [\r\n  { emoji: '😊', text: '开心', value: 'happy' },\r\n  { emoji: '😢', text: '伤心', value: 'sad' },\r\n  { emoji: '😡', text: '生气', value: 'angry' },\r\n  { emoji: '😴', text: '疲惫', value: 'tired' },\r\n  { emoji: '🥰', text: '爱意', value: 'love' },\r\n  { emoji: '🤔', text: '思考', value: 'thinking' }\r\n]\r\n\r\n// 获取心情文本\r\nconst getMoodText = (moodValue) => {\r\n  const mood = moods.find(m => m.value === moodValue)\r\n  return mood ? `${mood.emoji} ${mood.text}` : ''\r\n}\r\n\r\n// 切换心情选择器\r\nconst toggleMood = () => {\r\n  showMoodSelector.value = !showMoodSelector.value\r\n}\r\n\r\n// 选择心情\r\nconst selectMood = (moodValue) => {\r\n  newPost.value.mood = moodValue\r\n  showMoodSelector.value = false\r\n}\r\n\r\n// 检查发布内容是否有效\r\nconst isPostValid = computed(() => {\r\n  if (postType.value === 'diary') {\r\n    return newPost.value.title.trim() && newPost.value.content.trim()\r\n  } else {\r\n    return newPost.value.content.trim()\r\n  }\r\n})\r\n\r\n// 格式化日期\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return '刚刚'\r\n  \r\n  const date = new Date(dateString)\r\n  if (isNaN(date.getTime())) {\r\n    console.warn('无效的日期格式:', dateString)\r\n    return '刚刚'\r\n  }\r\n  \r\n  return date.toLocaleString('zh-CN', {\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    hour12: false\r\n  })\r\n}\r\n\r\n// 格式化时间\r\nconst formatPostTime = (createdAt) => {\r\n  if (!createdAt) {\r\n    console.warn('缺少创建时间，使用当前时间');\r\n    return format(new Date(), 'yyyy-MM-dd HH:mm');\r\n  }\r\n  \r\n  try {\r\n    const date = new Date(createdAt);\r\n    if (!isNaN(date.getTime())) {\r\n      return format(date, 'yyyy-MM-dd HH:mm');\r\n    } else {\r\n      console.warn('无效的日期格式:', createdAt);\r\n    }\r\n  } catch (error) {\r\n    console.error('日期格式化错误:', error);\r\n  }\r\n  \r\n  return format(new Date(), 'yyyy-MM-dd HH:mm');\r\n}\r\n\r\n// 添加帖子\r\nconst addPost = async () => {\r\n  if (!isPostValid.value) return\r\n  \r\n  try {\r\n    const postData = {\r\n      ...newPost.value,\r\n      createdAt: new Date().toISOString() // 确保设置创建时间\r\n    }\r\n    \r\n    const success = await postStore.addCustomPost(postData)\r\n    if (success) {\r\n      resetForm()\r\n      showPostDialog.value = false\r\n      await loadPosts()\r\n    }\r\n  } catch (error) {\r\n    console.error('发布失败:', error)\r\n    ElMessage.error('发布失败，请稍后再试')\r\n  }\r\n}\r\n\r\n// 格式化并过滤帖子数据以适应TimeLinePage组件\r\nconst filteredPosts = computed(() => {\r\n  if (!Array.isArray(postStore.posts)) {\r\n    console.warn('posts 不是数组:', postStore.posts)\r\n    return []\r\n  }\r\n  \r\n  let result = [...postStore.posts]\r\n  \r\n  // 调试：打印原始数据\r\n  console.log('原始帖子数据:', result)\r\n  \r\n  // 按类型过滤\r\n  if (activeFilter.value !== 'all') {\r\n    result = result.filter(post => post.type === activeFilter.value)\r\n  }\r\n  \r\n  // 按日期排序（降序）\r\n  result.sort((a, b) => {\r\n    const dateA = a.updatedAt ? new Date(a.updatedAt).getTime() : 0\r\n    const dateB = b.updatedAt ? new Date(b.updatedAt).getTime() : 0\r\n    return dateA - dateB\r\n  })\r\n  \r\n  return result.map(post => {\r\n    // 调试：打印每个帖子的日期\r\n    console.log('后端返回的帖子：', post);\r\n    console.log('处理帖子日期:', {\r\n      id: post._id,\r\n      createdAt: post.createdAt,\r\n    })\r\n    \r\n    // 构建标题: 日记显示标题，说说显示位置或心情\r\n    let title = post.title || ''\r\n    if (!title) {\r\n      if (post.location) {\r\n        title = `📍 ${post.location}`\r\n      } else if (post.mood) {\r\n        const mood = moods.find(m => m.value === post.mood)\r\n        title = mood ? `${mood.emoji} ${mood.text}` : ''\r\n      } else {\r\n        title = post.type === 'diary' ? '无标题日记' : ''\r\n      }\r\n    }\r\n    \r\n    // 构建描述: 可能包含天气等信息\r\n    let description = post.content\r\n    if (post.weather && post.type === 'diary') {\r\n      const weatherEmoji = {\r\n        'sunny': '☀️ 晴天',\r\n        'rainy': '🌧️ 下雨',\r\n        'cloudy': '☁️ 多云',\r\n        'snowy': '❄️ 下雪'\r\n      }\r\n      description = `${weatherEmoji[post.weather] || ''}\\n${description}`\r\n    }\r\n    \r\n    return {\r\n      time: post.updatedAt, // 直接使用后端返回的创建时间\r\n      title: title,\r\n      description: description,\r\n      imageSrc: post.images && post.images.length > 0 ? post.images[0] : null,\r\n      galleryImages: post.images || [], // 确保是数组\r\n      id: post._id,\r\n      postType: post.type,\r\n      // 添加原始属性以便编辑时正确保存\r\n      location: post.location,\r\n      mood: post.mood,\r\n      weather: post.weather\r\n    }\r\n  })\r\n})\r\n\r\n// 初始化时加载帖子\r\nconst loadPosts = async () => {\r\n  await postStore.fetchPosts(activeFilter.value === 'all' ? '' : activeFilter.value)\r\n}\r\n\r\n// 监听筛选器变化重新加载帖子\r\nwatch(activeFilter, async () => {\r\n  await loadPosts()\r\n})\r\n\r\n// 重置表单\r\nconst resetForm = () => {\r\n  newPost.value = {\r\n    title: '',\r\n    content: '',\r\n    images: [],\r\n    uploadFiles: [], // 清空上传文件列表\r\n    location: '',\r\n    mood: 'neutral',\r\n    weather: 'sunny',\r\n    type: postType.value\r\n  }\r\n  // 清空文件列表\r\n  fileList.value = []\r\n  locationVisible.value = false\r\n  weatherVisible.value = false\r\n  showMoodSelector.value = false\r\n  isEditing.value = false\r\n  editingPostId.value = null\r\n}\r\n\r\n// 删除帖子\r\nconst deletePost = async (id) => {\r\n  const success = await postStore.removePost(id)\r\n  if (success) {\r\n    // 重新加载帖子\r\n    loadPosts()\r\n  }\r\n}\r\n\r\n// 初始化时加载帖子\r\nonMounted(() => {\r\n  loadPosts()\r\n})\r\n\r\n// 处理图片预览\r\nconst handlePictureCardPreview = (file) => {\r\n  dialogImageUrl.value = file.url || URL.createObjectURL(file.raw)\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 处理文件选择\r\nconst handleFileChange = (file) => {\r\n  // 保留文件对象用于上传\r\n  if (!newPost.value.uploadFiles) {\r\n    newPost.value.uploadFiles = []\r\n  }\r\n  newPost.value.uploadFiles.push(file.raw)\r\n  \r\n  // 创建临时URL用于显示\r\n  const tempUrl = URL.createObjectURL(file.raw)\r\n  file.url = tempUrl // 添加临时URL用于预览\r\n  \r\n  // 只在上传成功后才会添加到最终的images数组\r\n}\r\n\r\n// 处理文件移除\r\nconst handleFileRemove = (file) => {\r\n  // 移除上传文件列表中的文件\r\n  if (newPost.value.uploadFiles) {\r\n    const index = newPost.value.uploadFiles.findIndex(f => {\r\n      return f === file.raw\r\n    })\r\n    if (index !== -1) {\r\n      newPost.value.uploadFiles.splice(index, 1)\r\n    }\r\n  }\r\n  \r\n  // 如果已上传，则也从images中移除\r\n  if (file.url && file.url.startsWith('http')) {\r\n    const imageIndex = newPost.value.images.indexOf(file.url)\r\n    if (imageIndex !== -1) {\r\n      newPost.value.images.splice(imageIndex, 1)\r\n    }\r\n  }\r\n}\r\n\r\n// 上传所有选中的图片到OSS\r\nconst uploadImages = async () => {\r\n  if (!newPost.value.uploadFiles || newPost.value.uploadFiles.length === 0) {\r\n    return []\r\n  }\r\n  \r\n  uploadLoading.value = true\r\n  try {\r\n    console.log('准备上传图片，数量:', newPost.value.uploadFiles.length);\r\n    \r\n    // 调用OSSApi上传多个文件\r\n    const imageUrls = await ossApi.uploadMultipleFiles(newPost.value.uploadFiles);\r\n    \r\n    console.log('图片上传成功，URL列表:', imageUrls);\r\n    \r\n    // 清空上传文件列表\r\n    newPost.value.uploadFiles = [];\r\n    \r\n    // 返回图片URL数组\r\n    return imageUrls || [];\r\n  } catch (error) {\r\n    console.error('上传图片失败:', error);\r\n    ElMessage.error(`上传图片失败: ${error.message || '未知错误'}`);\r\n    return [];\r\n  } finally {\r\n    uploadLoading.value = false;\r\n  }\r\n}\r\n\r\n// 滚动到上传区域\r\nconst scrollToUpload = () => {\r\n  document.getElementById('upload-section')?.scrollIntoView({ behavior: 'smooth' })\r\n}\r\n\r\n// 每次显示对话框时，更新postType到newPost\r\nwatch(postType, (newVal) => {\r\n  newPost.value.type = newVal\r\n  console.log('切换类型为:', newVal)\r\n})\r\n\r\n// 初始化对话框时设置类型\r\nconst openPostDialog = (type = 'thought') => {\r\n  isEditing.value = false\r\n  editingPostId.value = null\r\n  postType.value = type\r\n  newPost.value = {\r\n    title: '',\r\n    content: '',\r\n    images: [],\r\n    uploadFiles: [], // 确保上传文件列表为空\r\n    location: '',\r\n    mood: 'neutral',\r\n    weather: 'sunny',\r\n    type: type\r\n  }\r\n  // 清空文件列表\r\n  fileList.value = []\r\n  showPostDialog.value = true\r\n}\r\n\r\n// 编辑帖子\r\nconst editPost = (post) => {\r\n  isEditing.value = true\r\n  editingPostId.value = post.id\r\n  postType.value = post.postType\r\n  \r\n  // 填充表单数据\r\n  newPost.value = {\r\n    title: post.title,\r\n    content: post.description,\r\n    images: post.galleryImages || [],\r\n    uploadFiles: [], // 新上传的文件初始为空\r\n    location: post.location || '',\r\n    mood: post.mood || '',\r\n    weather: post.weather || '',\r\n    type: post.postType,\r\n    createdAt: post.time // 保留原始创建时间\r\n  }\r\n  \r\n  // 准备文件列表显示已有图片\r\n  fileList.value = (post.galleryImages || []).map((url, index) => {\r\n    return {\r\n      name: `已有图片${index + 1}`,\r\n      url: url,\r\n      status: 'success'\r\n    }\r\n  })\r\n  \r\n  // 显示相关选项\r\n  if (newPost.value.location) {\r\n    locationVisible.value = true\r\n  }\r\n  if (newPost.value.weather) {\r\n    weatherVisible.value = true\r\n  }\r\n  \r\n  showPostDialog.value = true\r\n}\r\n\r\n// 处理提交（新增或编辑）\r\nconst handleSubmit = async () => {\r\n  if (!isPostValid.value) return\r\n  \r\n  try {\r\n    // 显示加载提示\r\n    const loadingInstance = ElLoading.service({\r\n      lock: true,\r\n      text: '正在处理图片和提交内容，请稍候...',\r\n      background: 'rgba(0, 0, 0, 0.7)'\r\n    })\r\n    \r\n    // 先上传所有选中的图片到OSS\r\n    let imageUrls = []\r\n    if (newPost.value.uploadFiles && newPost.value.uploadFiles.length > 0) {\r\n      imageUrls = await uploadImages()\r\n    }\r\n    \r\n    // 准备帖子数据，包含已上传的图片URL和原有图片（如果有）\r\n    let postImages = [...(newPost.value.images || [])]\r\n    \r\n    // 只添加新上传的图片URL\r\n    postImages = [...postImages, ...imageUrls]\r\n    \r\n    const postData = {\r\n      ...newPost.value,\r\n      images: postImages,\r\n      // 设置创建时间：编辑时保留原始时间，新建时设置当前时间\r\n      createdAt: isEditing.value ? newPost.value.createdAt : new Date().toISOString()\r\n    }\r\n    \r\n    // 删除上传文件列表，避免发送到后端\r\n    delete postData.uploadFiles\r\n    \r\n    console.log('准备提交的帖子数据:', postData);\r\n    \r\n    let success\r\n    if (isEditing.value) {\r\n      success = await postStore.updatePost(editingPostId.value, postData)\r\n    } else {\r\n      success = await postStore.addCustomPost(postData)\r\n    }\r\n    \r\n    // 关闭加载提示\r\n    loadingInstance.close()\r\n    \r\n    if (success) {\r\n      // 清空表单并关闭对话框\r\n      resetForm()\r\n      showPostDialog.value = false\r\n      // 重新加载帖子列表\r\n      await loadPosts()\r\n      \r\n      ElMessage.success(isEditing.value ? '更新成功' : '发布成功')\r\n    }\r\n  } catch (error) {\r\n    console.error('操作失败:', error)\r\n    ElMessage.error('操作失败，请稍后再试')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.posts-container {\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.page-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.page-title {\r\n  font-size: 28px;\r\n  color: #409EFF;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.page-subtitle {\r\n  font-size: 16px;\r\n  color: #909399;\r\n}\r\n\r\n.content-card {\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\r\n  padding: 24px;\r\n  margin-bottom: 20px;\r\n  background-color: #F5F7FA;\r\n}\r\n\r\n.thought-input-area {\r\n  border: 1px dashed #DCDFE6;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.thought-input-area:hover {\r\n  border-color: #409EFF;\r\n  background-color: #E6F1FF;\r\n}\r\n\r\n.thought-input-placeholder {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  color: #606266;\r\n}\r\n\r\n.thought-input-placeholder .el-icon {\r\n  font-size: 20px;\r\n}\r\n\r\n.filter-tabs {\r\n  display: flex;\r\n  gap: 16px;\r\n  border-bottom: 1px solid #DCDFE6;\r\n  padding-bottom: 12px;\r\n}\r\n\r\n.filter-tab {\r\n  cursor: pointer;\r\n  padding: 6px 12px;\r\n  border-radius: 16px;\r\n  transition: all 0.3s;\r\n  font-size: 14px;\r\n  background-color: #EBEEF5;\r\n}\r\n\r\n.filter-tab:hover {\r\n  color: #409EFF;\r\n  background-color: #DBECFF;\r\n}\r\n\r\n.filter-tab.active {\r\n  color: white;\r\n  background-color: #409EFF;\r\n  font-weight: 500;\r\n}\r\n\r\n.content-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 16px;\r\n}\r\n\r\n.write-diary-btn {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n}\r\n\r\n.timeline-wrapper {\r\n  margin-top: 30px;\r\n}\r\n\r\n/* 对话框相关样式 */\r\n:deep(.post-dialog) {\r\n  border-radius: 16px;\r\n  overflow: hidden;\r\n}\r\n\r\n.post-type-selector {\r\n  display: flex;\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.post-type-option {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  border: 1px solid #EBEEF5;\r\n}\r\n\r\n.post-type-option .el-icon {\r\n  font-size: 24px;\r\n  color: #909399;\r\n}\r\n\r\n.post-type-option:hover {\r\n  background-color: #E6F1FF;\r\n}\r\n\r\n.post-type-option.active {\r\n  background-color: #409EFF;\r\n  color: white;\r\n  border-color: #409EFF;\r\n}\r\n\r\n.post-type-option.active .el-icon {\r\n  color: white;\r\n}\r\n\r\n/* 日记特有样式 */\r\n.diary-form {\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n}\r\n\r\n.diary-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px dashed #DCDFE6;\r\n}\r\n\r\n.diary-date {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 8px;\r\n}\r\n\r\n.diary-day {\r\n  font-size: 28px;\r\n  font-weight: 700;\r\n  color: #409EFF;\r\n}\r\n\r\n.diary-month-year {\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.diary-weather-mood {\r\n  display: flex;\r\n  gap: 15px;\r\n  font-size: 16px;\r\n}\r\n\r\n.diary-title-item {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.diary-title-input :deep(input) {\r\n  font-size: 18px;\r\n  height: 48px;\r\n  font-weight: 600;\r\n}\r\n\r\n.diary-content {\r\n  font-size: 15px;\r\n  line-height: 1.7;\r\n}\r\n\r\n.diary-content :deep(.el-textarea__inner) {\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  background-color: #fafafa;\r\n  border: 1px solid #e4e7ed;\r\n  transition: all 0.3s;\r\n  font-family: inherit;\r\n}\r\n\r\n.diary-content :deep(.el-textarea__inner:focus) {\r\n  background-color: #fff;\r\n  box-shadow: 0 0 10px rgba(64, 158, 255, 0.2);\r\n}\r\n\r\n.diary-toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 8px;\r\n  margin-bottom: 15px;\r\n  padding: 10px 12px;\r\n  background-color: #E6F1FF;\r\n  border-radius: 8px;\r\n}\r\n\r\n.toolbar-group {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.diary-image-count {\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.weather-selector {\r\n  margin-top: 10px;\r\n}\r\n\r\n.weather-options {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.weather-option {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 10px 15px;\r\n  border-radius: 8px;\r\n  border: 1px solid #e4e7ed;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.weather-option:hover {\r\n  background-color: #E6F1FF;\r\n}\r\n\r\n.weather-option.active {\r\n  background-color: #DBECFF;\r\n  border-color: #409EFF;\r\n  color: #409EFF;\r\n}\r\n\r\n.weather-icon {\r\n  font-size: 22px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.diary-upload {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #E6F1FF;\r\n  border-radius: 8px;\r\n  border: 1px dashed #c0c4cc;\r\n}\r\n\r\n.upload-title {\r\n  margin-bottom: 12px;\r\n  font-size: 15px;\r\n  color: #606266;\r\n  text-align: center;\r\n}\r\n\r\n.upload-area {\r\n  margin-top: 8px;\r\n}\r\n\r\n:deep(.upload-icon) {\r\n  font-size: 20px;\r\n  color: #909399;\r\n}\r\n\r\n:deep(.upload-text) {\r\n  margin-top: 8px;\r\n  color: #909399;\r\n}\r\n\r\n.post-options {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.option-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  padding: 6px 12px;\r\n  border-radius: 16px;\r\n  background-color: #EBEEF5;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-size: 14px;\r\n}\r\n\r\n.option-item:hover {\r\n  background-color: #DBECFF;\r\n}\r\n\r\n.option-item .el-icon {\r\n  font-size: 16px;\r\n  color: #909399;\r\n}\r\n\r\n.mood-selector {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 12px;\r\n  margin-top: 8px;\r\n}\r\n\r\n.mood-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 6px;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  border: 1px solid #EBEEF5;\r\n}\r\n\r\n.mood-item:hover {\r\n  background-color: #E6F1FF;\r\n}\r\n\r\n.mood-item.active {\r\n  background-color: #DBECFF;\r\n  border-color: #409EFF;\r\n}\r\n\r\n.mood-emoji {\r\n  font-size: 24px;\r\n}\r\n\r\n.mood-text {\r\n  font-size: 12px;\r\n  color: #606266;\r\n}\r\n\r\n.dialog-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 12px;\r\n  width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .posts-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .page-title {\r\n    font-size: 24px;\r\n  }\r\n  \r\n  .page-subtitle {\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .mood-selector {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  \r\n  .diary-day {\r\n    font-size: 28px;\r\n  }\r\n  \r\n  .weather-options {\r\n    flex-wrap: wrap;\r\n  }\r\n}\r\n\r\n/* 添加编辑按钮样式 */\r\n.edit-button {\r\n  color: #409EFF;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.edit-button:hover {\r\n  color: #66b1ff;\r\n}\r\n</style> ","import script from \"./Posts.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Posts.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Posts.vue?vue&type=style&index=0&id=0dc2d5a7&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0dc2d5a7\"]])\n\nexport default __exports__","import api from './api';\r\nimport axios from 'axios';\r\n\r\n// OSS操作相关API\r\nconst ossApi = {\r\n  /**\r\n   * 获取OSS配置（临时凭证）\r\n   * @returns {Promise<Object>} OSS配置信息\r\n   */\r\n  getOSSConfig() {\r\n    return api.get('/oss/config');\r\n  },\r\n\r\n  /**\r\n   * 获取OSS上传策略（Policy）\r\n   * @param {string} dir 上传目录\r\n   * @returns {Promise<Object>} 上传策略\r\n   */\r\n  getOSSPolicy(dir = 'posts/') {\r\n    return api.get('/oss/policy', { params: { dir } });\r\n  },\r\n\r\n  /**\r\n   * 直接上传文件到阿里云OSS\r\n   * @param {File} file 要上传的文件对象\r\n   * @param {string} dir 上传目录\r\n   * @returns {Promise<string>} 文件的URL\r\n   */\r\n  async uploadFile(file, dir = 'posts/') {\r\n    try {\r\n      // 1. 获取上传策略\r\n      const policyRes = await this.getOSSPolicy(dir);\r\n      const policy = policyRes.policy;\r\n      \r\n      if (!policy) {\r\n        throw new Error('获取上传策略失败');\r\n      }\r\n      \r\n      // 检查并处理host，确保是一个有效的URL字符串\r\n      let host = policy.host;\r\n      if (typeof host === 'object') {\r\n        console.error('Host 是一个对象而不是字符串:', host);\r\n        // 尝试从对象中获取URL，或者构建一个默认URL\r\n        host = `https://${policy.bucket}.${policy.region}.aliyuncs.com`;\r\n      }\r\n      \r\n      // 确保host是一个有效的URL字符串\r\n      if (!host.startsWith('http')) {\r\n        host = `https://${host}`;\r\n      }\r\n      \r\n      // 2. 准备表单数据\r\n      const formData = new FormData();\r\n      const key = `${policy.key}${file.name.substring(file.name.lastIndexOf('.'))}`;\r\n      \r\n      formData.append('key', key);\r\n      formData.append('OSSAccessKeyId', policy.accessKeyId);\r\n      formData.append('policy', policy.policyBase64);\r\n      formData.append('signature', policy.signature);\r\n      formData.append('success_action_status', '200');\r\n      formData.append('file', file);\r\n      \r\n      console.log('正在上传文件到:', host);\r\n      \r\n      // 3. 上传文件到OSS\r\n      await axios.post(host, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      \r\n      // 4. 返回文件URL\r\n      let cdnHost = policy.cdnHost || host;\r\n      if (typeof cdnHost === 'object') {\r\n        cdnHost = host; // 如果cdnHost也是对象，则使用host\r\n      }\r\n      \r\n      // 确保URL格式正确\r\n      const fileUrl = `${cdnHost}/${key}`;\r\n      console.log('文件上传成功，URL:', fileUrl);\r\n      \r\n      return fileUrl;\r\n    } catch (error) {\r\n      console.error('上传文件到OSS失败:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 批量上传文件到阿里云OSS\r\n   * @param {Array<File>} files 要上传的文件对象数组\r\n   * @param {string} dir 上传目录\r\n   * @returns {Promise<Array<string>>} 文件URL数组\r\n   */\r\n  async uploadMultipleFiles(files, dir = 'posts/') {\r\n    if (!files || files.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    try {\r\n      // 同时获取一次上传策略\r\n      const policyRes = await this.getOSSPolicy(dir);\r\n      const policy = policyRes.policy;\r\n      \r\n      if (!policy) {\r\n        throw new Error('获取上传策略失败');\r\n      }\r\n      \r\n      // 检查并处理host，确保是一个有效的URL字符串\r\n      let host = policy.host;\r\n      if (typeof host === 'object') {\r\n        console.error('Host 是一个对象而不是字符串:', host);\r\n        // 尝试从对象中获取URL，或者构建一个默认URL\r\n        host = `https://${policy.bucket}.${policy.region}.aliyuncs.com`;\r\n      }\r\n      \r\n      // 确保host是一个有效的URL字符串\r\n      if (!host.startsWith('http')) {\r\n        host = `https://${host}`;\r\n      }\r\n      \r\n      console.log('准备批量上传文件到:', host);\r\n      \r\n      // 并行上传所有文件\r\n      const uploadPromises = files.map(async (file, index) => {\r\n        try {\r\n          const formData = new FormData();\r\n          const key = `${policy.key}-${index}${file.name.substring(file.name.lastIndexOf('.'))}`;\r\n          \r\n          formData.append('key', key);\r\n          formData.append('OSSAccessKeyId', policy.accessKeyId);\r\n          formData.append('policy', policy.policyBase64);\r\n          formData.append('signature', policy.signature);\r\n          formData.append('success_action_status', '200');\r\n          formData.append('file', file);\r\n          \r\n          await axios.post(host, formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data'\r\n            }\r\n          });\r\n          \r\n          // 处理返回URL\r\n          let cdnHost = policy.cdnHost || host;\r\n          if (typeof cdnHost === 'object') {\r\n            cdnHost = host; // 如果cdnHost也是对象，则使用host\r\n          }\r\n          \r\n          const fileUrl = `${cdnHost}/${key}`;\r\n          console.log(`文件 ${index+1}/${files.length} 上传成功:`, fileUrl);\r\n          return fileUrl;\r\n        } catch (error) {\r\n          console.error(`文件 ${index+1}/${files.length} 上传失败:`, error);\r\n          throw error;\r\n        }\r\n      });\r\n      \r\n      // 等待所有上传完成\r\n      const fileUrls = await Promise.all(uploadPromises);\r\n      console.log('所有文件上传完成，URL列表:', fileUrls);\r\n      return fileUrls;\r\n    } catch (error) {\r\n      console.error('批量上传文件到OSS失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default ossApi; "],"names":["usePostStore","defineStore","posts","ref","loading","fetchPosts","async","type","value","response","postApi","getPosts","error","console","ElMessage","addCustomPost","dataToSubmit","postData","createdAt","Date","toISOString","log","createPost","addPost","content","images","location","removePost","deletePost","id","filter","post","_id","success","updatePost","init","props","__props","sortedStories","computed","stories","sort","a","b","dateA","time","getTime","dateB","deleteDialogVisible","postToDelete","emit","__emit","formatDate","dateString","date","isNaN","warn","toLocaleDateString","month","day","formatTime","toLocaleTimeString","hour","minute","confirmDelete","editPost","story","__exports__","postStore","showPostDialog","locationVisible","weatherVisible","showMoodSelector","postType","activeFilter","isEditing","editingPostId","fileList","dialogImageUrl","dialogVisible","uploadLoading","newPost","title","uploadFiles","mood","weather","moods","emoji","text","getMoodText","moodValue","find","m","toggleMood","selectMood","isPostValid","trim","filteredPosts","Array","isArray","result","updatedAt","map","description","weatherEmoji","imageSrc","length","galleryImages","loadPosts","watch","resetForm","onMounted","handlePictureCardPreview","file","url","URL","createObjectURL","raw","handleFileChange","push","tempUrl","handleFileRemove","index","findIndex","f","splice","startsWith","imageIndex","indexOf","uploadImages","imageUrls","ossApi","uploadMultipleFiles","message","scrollToUpload","document","getElementById","scrollIntoView","behavior","newVal","openPostDialog","name","status","handleSubmit","loadingInstance","ElLoading","service","lock","background","postImages","close","getOSSConfig","api","get","getOSSPolicy","dir","params","uploadFile","policyRes","this","policy","Error","host","bucket","region","formData","FormData","key","substring","lastIndexOf","append","accessKeyId","policyBase64","signature","axios","headers","cdnHost","fileUrl","files","uploadPromises","fileUrls","Promise","all"],"sourceRoot":""}